{"version":3,"file":"vendors-cee6a9a8.3e95cc108b214a1506c0.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxhKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtbnldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxEA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA","sources":["webpack://web-client/./node_modules/@aurelia-mdc-web/ripple/dist/native-modules/index.js","webpack://web-client/./node_modules/@aurelia-mdc-web/ripple/dist/native-modules/mdc-ripple.js","webpack://web-client/./node_modules/@aurelia-mdc-web/segmented-button/dist/native-modules/index.js","webpack://web-client/./node_modules/@aurelia-mdc-web/segmented-button/dist/native-modules/mdc-segmented-button-segment/enhance-mdc-segmented-button-segment.js","webpack://web-client/./node_modules/@aurelia-mdc-web/segmented-button/dist/native-modules/mdc-segmented-button-segment/mdc-segmented-button-segment.js","webpack://web-client/./node_modules/@aurelia-mdc-web/segmented-button/dist/native-modules/mdc-segmented-button.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/index.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-default-select-configuration.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select-foundation-aurelia.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select-helper-text/mdc-select-helper-text.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select-icon.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select-value-observer.js","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select.js","webpack://web-client/./node_modules/@aurelia-mdc-web/slider/dist/native-modules/index.js","webpack://web-client/./node_modules/@aurelia-mdc-web/slider/dist/native-modules/mdc-slider-foundation-aurelia.js","webpack://web-client/./node_modules/@aurelia-mdc-web/slider/dist/native-modules/mdc-slider.js","webpack://web-client/./node_modules/@aurelia-mdc-web/snackbar/dist/native-modules/index.js","webpack://web-client/./node_modules/@aurelia-mdc-web/snackbar/dist/native-modules/mdc-snackbar-service.js","webpack://web-client/./node_modules/@aurelia-mdc-web/snackbar/dist/native-modules/mdc-snackbar.js","webpack://web-client/./node_modules/@aurelia-mdc-web/switch/dist/native-modules/enhance-mdc-switch.js","webpack://web-client/./node_modules/@aurelia-mdc-web/switch/dist/native-modules/index.js","webpack://web-client/./node_modules/@aurelia-mdc-web/switch/dist/native-modules/mdc-switch.js","webpack://web-client/./node_modules/@aurelia-mdc-web/segmented-button/dist/native-modules/mdc-segmented-button-segment/mdc-segmented-button-segment.html","webpack://web-client/./node_modules/@aurelia-mdc-web/segmented-button/dist/native-modules/mdc-segmented-button.html","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select-helper-text/mdc-select-helper-text.html","webpack://web-client/./node_modules/@aurelia-mdc-web/select/dist/native-modules/mdc-select.html","webpack://web-client/./node_modules/@aurelia-mdc-web/slider/dist/native-modules/mdc-slider.html","webpack://web-client/./node_modules/@aurelia-mdc-web/snackbar/dist/native-modules/mdc-snackbar.html","webpack://web-client/./node_modules/@aurelia-mdc-web/switch/dist/native-modules/mdc-switch.html"],"sourcesContent":["import { PLATFORM } from 'aurelia-framework';\nexport { MdcRipple } from './mdc-ripple';\nexport function configure(config) {\n    config.globalResources([\n        PLATFORM.moduleName('./mdc-ripple')\n    ]);\n}\n//# sourceMappingURL=index.js.map","import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { MDCRippleFoundation, util } from '@material/ripple';\nimport { matches } from '@material/dom/ponyfill';\nimport { applyPassive } from '@material/dom/events';\nimport { inject, customAttribute } from 'aurelia-framework';\nimport { bindable } from 'aurelia-typed-observable-plugin';\nvar MdcRipple = /** @class */ (function (_super) {\n    __extends(MdcRipple, _super);\n    function MdcRipple() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputBindingPromise = new Promise(function (r) { return _this.inputBindingPromiseResolver = r; });\n        return _this;\n    }\n    MdcRipple_1 = MdcRipple;\n    MdcRipple.prototype.inputChanged = function () {\n        this.inputBindingPromiseResolver();\n    };\n    MdcRipple.prototype.unboundedChanged = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _b.sent();\n                        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setUnbounded(Boolean(this.unbounded));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcRipple.prototype.initialise = function () {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var inputBinding;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        this.root.classList.add(MdcRipple_1.ATTRIBUTE_CLASS);\n                        if (!this.noClass) {\n                            ((_a = this.surface) !== null && _a !== void 0 ? _a : this.root).classList.add('mdc-ripple-surface');\n                            if (this.primary) {\n                                ((_b = this.surface) !== null && _b !== void 0 ? _b : this.root).classList.add('mdc-ripple-surface--primary');\n                            }\n                            if (this.accent) {\n                                ((_c = this.surface) !== null && _c !== void 0 ? _c : this.root).classList.add('mdc-ripple-surface--accent');\n                            }\n                        }\n                        inputBinding = this.root.au['mdc-ripple'].boundProperties.find(function (x) { return x.binding.targetProperty === 'input'; });\n                        if (!inputBinding) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.inputBindingPromise];\n                    case 1:\n                        _d.sent();\n                        _d.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcRipple.prototype.activate = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.activate();\n    };\n    MdcRipple.prototype.deactivate = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.deactivate();\n    };\n    MdcRipple.prototype.layout = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.layout();\n    };\n    MdcRipple.prototype.getDefaultFoundation = function () {\n        return new MDCRippleFoundation(this.createAdapter());\n    };\n    MdcRipple.prototype.createAdapter = function () {\n        var _this = this;\n        var _a;\n        return {\n            addClass: function (className) { var _a; return ((_a = _this.surface) !== null && _a !== void 0 ? _a : _this.root).classList.add(className); },\n            browserSupportsCssVars: function () { return util.supportsCssVariables(window); },\n            computeBoundingRect: (_a = this.computeBoundingRect) !== null && _a !== void 0 ? _a : (function () { var _a; return ((_a = _this.surface) !== null && _a !== void 0 ? _a : _this.root).getBoundingClientRect(); }),\n            containsEventTarget: function (target) { return _this.root.contains(target); },\n            deregisterDocumentInteractionHandler: function (evtType, handler) { return document.documentElement.removeEventListener(evtType, handler, applyPassive()); },\n            deregisterInteractionHandler: function (evtType, handler) { var _a; return ((_a = _this.input) !== null && _a !== void 0 ? _a : _this.root).removeEventListener(evtType, handler, applyPassive()); },\n            deregisterResizeHandler: function (handler) { return window.removeEventListener('resize', handler); },\n            getWindowPageOffset: function () { return ({ x: window.pageXOffset, y: window.pageYOffset }); },\n            isSurfaceActive: function () { var _a; return _this.activeSurface && matches((_a = _this.input) !== null && _a !== void 0 ? _a : _this.root, ':active'); },\n            isSurfaceDisabled: function () { return _this.disabled; },\n            isUnbounded: function () { return _this.unbounded; },\n            registerDocumentInteractionHandler: function (evtType, handler) { return document.documentElement.addEventListener(evtType, handler, applyPassive()); },\n            registerInteractionHandler: function (evtType, handler) { var _a; return ((_a = _this.input) !== null && _a !== void 0 ? _a : _this.root).addEventListener(evtType, handler, applyPassive()); },\n            registerResizeHandler: function (handler) { return window.addEventListener('resize', handler); },\n            removeClass: function (className) { var _a; return ((_a = _this.surface) !== null && _a !== void 0 ? _a : _this.root).classList.remove(className); },\n            updateCssVariable: function (varName, value) { var _a; return ((_a = _this.surface) !== null && _a !== void 0 ? _a : _this.root).style.setProperty(varName, value); },\n        };\n    };\n    var MdcRipple_1;\n    MdcRipple.ATTRIBUTE_CLASS = 'mdc-ripple-enhanced';\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", HTMLInputElement)\n    ], MdcRipple.prototype, \"input\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", HTMLElement)\n    ], MdcRipple.prototype, \"surface\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", Function)\n    ], MdcRipple.prototype, \"computeBoundingRect\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcRipple.prototype, \"disabled\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcRipple.prototype, \"unbounded\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcRipple.prototype, \"activeSurface\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcRipple.prototype, \"noClass\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcRipple.prototype, \"primary\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcRipple.prototype, \"accent\", void 0);\n    MdcRipple = MdcRipple_1 = __decorate([\n        inject(Element),\n        customAttribute('mdc-ripple')\n    ], MdcRipple);\n    return MdcRipple;\n}(MdcComponent));\nexport { MdcRipple };\n//# sourceMappingURL=mdc-ripple.js.map","import { PLATFORM, bindingMode, EventSubscriber, CheckedObserver } from 'aurelia-framework';\nimport { MdcComponentAdapters } from '@aurelia-mdc-web/base';\nexport { MdcSegmentedButton } from './mdc-segmented-button';\nexport { MdcSegmentedButtonSegment } from './mdc-segmented-button-segment/mdc-segmented-button-segment';\nexport function configure(config) {\n    config.container.get(MdcComponentAdapters).registerMdcElementConfig(segmentedButtonSegmentConfig);\n    config.globalResources([\n        PLATFORM.moduleName('./mdc-segmented-button'),\n        PLATFORM.moduleName('./mdc-segmented-button-segment/mdc-segmented-button-segment'),\n        PLATFORM.moduleName('./mdc-segmented-button-segment/enhance-mdc-segmented-button-segment')\n    ]);\n    config.aurelia.use.plugin(PLATFORM.moduleName('@aurelia-mdc-web/ripple'));\n}\nvar segmentedButtonSegmentConfig = {\n    tagName: 'mdc-segmented-button-segment',\n    properties: {\n        checked: {\n            defaultBindingMode: bindingMode.twoWay,\n            getObserver: function (element, _, observerLocator) {\n                return new CheckedObserver(element, new EventSubscriber(['selected', 'unselected']), observerLocator);\n            }\n        }\n    }\n};\n//# sourceMappingURL=index.js.map","import { __decorate, __values } from \"tslib\";\nimport { viewEngineHooks } from 'aurelia-framework';\nvar EnhanceMdcSegmentedButtonSegment = /** @class */ (function () {\n    function EnhanceMdcSegmentedButtonSegment() {\n    }\n    EnhanceMdcSegmentedButtonSegment.prototype.beforeCompile = function (template) {\n        var e_1, _a;\n        var actions = template.querySelectorAll('[mdc-segmented-button-segment]');\n        try {\n            for (var _b = __values(Array.from(actions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var i = _c.value;\n                i.setAttribute('as-element', 'mdc-segmented-button-segment');\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    EnhanceMdcSegmentedButtonSegment = __decorate([\n        viewEngineHooks\n    ], EnhanceMdcSegmentedButtonSegment);\n    return EnhanceMdcSegmentedButtonSegment;\n}());\nexport { EnhanceMdcSegmentedButtonSegment };\n//# sourceMappingURL=enhance-mdc-segmented-button-segment.js.map","import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\nimport { MDCSegmentedButtonSegmentFoundation } from '@material/segmented-button';\nimport { events } from '@material/segmented-button/segment/constants';\nimport { inject, useView, PLATFORM, customElement } from 'aurelia-framework';\nimport { bindable } from 'aurelia-typed-observable-plugin';\nimport { MdcComponent } from '@aurelia-mdc-web/base';\n/**\n * @selector button[mdc-segmented-button-segment]\n */\nvar MdcSegmentedButtonSegment = /** @class */ (function (_super) {\n    __extends(MdcSegmentedButtonSegment, _super);\n    function MdcSegmentedButtonSegment(root) {\n        var _this = _super.call(this, root) || this;\n        defineMdcSegmentedButtonSegmentElementApis(root);\n        return _this;\n    }\n    Object.defineProperty(MdcSegmentedButtonSegment.prototype, \"checked\", {\n        /** Use to verify the checked value */\n        get: function () {\n            var _a, _b;\n            if (this.foundation) {\n                return (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.isSelected();\n            }\n            else {\n                return (_b = this._checked) !== null && _b !== void 0 ? _b : false;\n            }\n        },\n        /**\n         * Whether the segment is checked.\n         */\n        set: function (value) {\n            var _a, _b;\n            this._checked = value;\n            if (value) {\n                (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setSelected();\n            }\n            else {\n                (_b = this.foundation) === null || _b === void 0 ? void 0 : _b.setUnselected();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MdcSegmentedButtonSegment.prototype.handleClick = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleClick();\n    };\n    // eslint-disable-next-line @typescript-eslint/require-await\n    MdcSegmentedButtonSegment.prototype.initialise = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var attributeValue;\n            return __generator(this, function (_a) {\n                if (this.root.hasAttribute('checked')) {\n                    attributeValue = this.root.getAttribute('checked');\n                    if (attributeValue || attributeValue === '') {\n                        this.root.checked = true;\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    MdcSegmentedButtonSegment.prototype.initialSyncWithDOM = function () {\n        if (this._checked !== undefined) {\n            this.checked = this._checked;\n        }\n    };\n    MdcSegmentedButtonSegment.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take\n        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n        // methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            isSingleSelect: function () {\n                return _this.isSingleSelect;\n            },\n            getAttr: function (attrName) {\n                return _this.root.getAttribute(attrName);\n            },\n            setAttr: function (attrName, value) {\n                _this.root.setAttribute(attrName, value);\n            },\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            hasClass: function (className) {\n                return _this.root.classList.contains(className);\n            },\n            notifySelectedChange: function (selected) { return _this.notifySelectedChange(events.SELECTED, selected); },\n            getRootBoundingClientRect: function () {\n                return _this.root.getBoundingClientRect();\n            }\n        };\n        return new MDCSegmentedButtonSegmentFoundation(adapter);\n    };\n    MdcSegmentedButtonSegment.prototype.notifySelectedChange = function (event, selected) {\n        this.emit(event, {\n            index: this.index,\n            selected: selected,\n            segmentId: this.getSegmentId()\n        }, true /* shouldBubble */);\n    };\n    MdcSegmentedButtonSegment.prototype.setIsSingleSelect = function (isSingleSelect) {\n        this.isSingleSelect = isSingleSelect;\n        this.root.setAttribute('role', isSingleSelect ? 'radio' : '');\n    };\n    /**\n     * Sets segment's index value\n     *\n     * @hidden\n     * @param index Segment's index within wrapping segmented button\n     */\n    MdcSegmentedButtonSegment.prototype.setIndex = function (index) {\n        this.index = index;\n    };\n    /**\n     * @hidden\n     * @return Returns segment's segmentId if it was set by client\n     */\n    MdcSegmentedButtonSegment.prototype.getSegmentId = function () {\n        var _a;\n        return (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.getSegmentId();\n    };\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSegmentedButtonSegment.prototype, \"touch\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSegmentedButtonSegment.prototype, \"icon\", void 0);\n    MdcSegmentedButtonSegment = __decorate([\n        inject(Element),\n        useView(PLATFORM.moduleName('./mdc-segmented-button-segment.html')),\n        customElement('mdc-segmented-button-segment'),\n        __metadata(\"design:paramtypes\", [Object])\n    ], MdcSegmentedButtonSegment);\n    return MdcSegmentedButtonSegment;\n}(MdcComponent));\nexport { MdcSegmentedButtonSegment };\nfunction defineMdcSegmentedButtonSegmentElementApis(element) {\n    Object.defineProperties(element, {\n        type: {\n            value: 'checkbox'\n        },\n        checked: {\n            get: function () {\n                return this.au.controller.viewModel.checked;\n            },\n            set: function (value) {\n                this.au.controller.viewModel.checked = value;\n            },\n            configurable: true\n        }\n    });\n}\n//# sourceMappingURL=mdc-segmented-button-segment.js.map","import { __decorate, __extends, __metadata } from \"tslib\";\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { MDCSegmentedButtonFoundation } from '@material/segmented-button';\nimport { events } from '@material/segmented-button/segmented-button/constants';\nimport { inject } from 'aurelia-dependency-injection';\nimport { PLATFORM } from 'aurelia-pal';\nimport { children, customElement, useView } from 'aurelia-templating';\nimport { bindable } from 'aurelia-typed-observable-plugin';\n/**\n * @selector mdc-segmented-button\n */\nvar MdcSegmentedButton = /** @class */ (function (_super) {\n    __extends(MdcSegmentedButton, _super);\n    function MdcSegmentedButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MdcSegmentedButton.prototype.singleChanged = function () {\n        this.root.setAttribute('role', this.single ? 'radiogroup' : 'group');\n    };\n    MdcSegmentedButton.prototype.initialSyncWithDOM = function () {\n        var isSingleSelect = this.foundation.isSingleSelect();\n        for (var i = 0; i < this.segmentsList.length; i++) {\n            var segment = this.segmentsList[i];\n            segment.setIndex(i);\n            segment.setIsSingleSelect(isSingleSelect);\n        }\n    };\n    MdcSegmentedButton.prototype.handleSelected = function (event) {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleSelected(event.detail);\n    };\n    MdcSegmentedButton.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        var adapter = {\n            hasClass: function (className) {\n                return _this.root.classList.contains(className);\n            },\n            getSegments: function () {\n                return _this.mappedSegments();\n            },\n            selectSegment: function (indexOrSegmentId) {\n                var segmentDetail = _this.mappedSegments().find(function (detail) { return detail.index === indexOrSegmentId ||\n                    detail.segmentId === indexOrSegmentId; });\n                if (segmentDetail) {\n                    _this.segmentsList[segmentDetail.index].checked = true;\n                }\n            },\n            unselectSegment: function (indexOrSegmentId) {\n                var segmentDetail = _this.mappedSegments().find(function (detail) { return detail.index === indexOrSegmentId ||\n                    detail.segmentId === indexOrSegmentId; });\n                if (segmentDetail) {\n                    _this.segmentsList[segmentDetail.index].checked = false;\n                    _this.segmentsList[segmentDetail.index].notifySelectedChange('unselected', false);\n                }\n            },\n            notifySelectedChange: function (detail) {\n                _this.emit(events.CHANGE, detail, true /* shouldBubble */);\n            }\n        };\n        return new MDCSegmentedButtonFoundation(adapter);\n    };\n    /**\n     * @return Returns child segments mapped to readonly SegmentDetail list\n     */\n    MdcSegmentedButton.prototype.mappedSegments = function () {\n        return this.segmentsList.map(function (segment, index) {\n            return {\n                index: index,\n                selected: segment.checked,\n                segmentId: segment.getSegmentId()\n            };\n        });\n    };\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSegmentedButton.prototype, \"single\", void 0);\n    __decorate([\n        children('.mdc-segmented-button__segment'),\n        __metadata(\"design:type\", Array)\n    ], MdcSegmentedButton.prototype, \"segmentsList\", void 0);\n    MdcSegmentedButton = __decorate([\n        inject(Element),\n        useView(PLATFORM.moduleName('./mdc-segmented-button.html')),\n        customElement('mdc-segmented-button')\n    ], MdcSegmentedButton);\n    return MdcSegmentedButton;\n}(MdcComponent));\nexport { MdcSegmentedButton };\n//# sourceMappingURL=mdc-segmented-button.js.map","import { PLATFORM, bindingMode, EventSubscriber } from 'aurelia-framework';\nimport { MdcComponentAdapters } from '@aurelia-mdc-web/base';\nimport { strings } from '@material/select';\nimport { MdcSelectValueObserver } from './mdc-select-value-observer';\nimport { MdcDefaultSelectConfiguration } from './mdc-default-select-configuration';\nexport { MdcSelect } from './mdc-select';\nexport { MdcDefaultSelectConfiguration };\nexport function configure(frameworkConfig, callback) {\n    frameworkConfig.container.get(MdcComponentAdapters).registerMdcElementConfig(selectConfig);\n    frameworkConfig.globalResources([\n        PLATFORM.moduleName('./mdc-select'),\n        PLATFORM.moduleName('./mdc-select-icon'),\n        PLATFORM.moduleName('./mdc-select-helper-text/mdc-select-helper-text')\n    ]);\n    frameworkConfig.aurelia\n        .use\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/floating-label'))\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/line-ripple'))\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/list'))\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/menu'))\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/notched-outline'))\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/ripple'));\n    if (typeof callback === 'function') {\n        var config = frameworkConfig.container.get(MdcDefaultSelectConfiguration);\n        callback(config);\n    }\n}\nvar selectConfig = {\n    tagName: 'mdc-select',\n    properties: {\n        value: {\n            defaultBindingMode: bindingMode.twoWay,\n            getObserver: function (element) {\n                return new MdcSelectValueObserver(element, new EventSubscriber([strings.CHANGE_EVENT]));\n            }\n        }\n    }\n};\n//# sourceMappingURL=index.js.map","var MdcDefaultSelectConfiguration = /** @class */ (function () {\n    function MdcDefaultSelectConfiguration() {\n    }\n    return MdcDefaultSelectConfiguration;\n}());\nexport { MdcDefaultSelectConfiguration };\n//# sourceMappingURL=mdc-default-select-configuration.js.map","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { KEY, normalizeKey } from '@material/dom/keyboard';\nimport { Corner } from '@material/menu-surface/constants';\nimport { cssClasses, numbers, strings } from '@material/select';\n// !!! MODIFIED FOR AURELIA !!!\nvar MDCSelectFoundationAurelia = /** @class */ (function (_super) {\n    __extends(MDCSelectFoundationAurelia, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    /**\n     * @param adapter\n     * @param foundationMap Map from subcomponent names to their subfoundations.\n     */\n    function MDCSelectFoundationAurelia(adapter, foundationMap) {\n        if (foundationMap === void 0) { foundationMap = {}; }\n        var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundationAurelia.defaultAdapter), adapter)) || this;\n        // Disabled state\n        _this.disabled = false;\n        // isMenuOpen is used to track the state of the menu by listening to the\n        // MDCMenuSurface:closed event For reference, menu.open will return false if\n        // the menu is still closing, but isMenuOpen returns false only after the menu\n        // has closed\n        _this.isMenuOpen = false;\n        // By default, select is invalid if it is required but no value is selected.\n        _this.useDefaultValidation = true;\n        _this.customValidity = true;\n        _this.lastSelectedIndex = numbers.UNSET_INDEX;\n        _this.leadingIcon = foundationMap.leadingIcon;\n        _this.helperText = foundationMap.helperText;\n        return _this;\n    }\n    Object.defineProperty(MDCSelectFoundationAurelia, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundationAurelia, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundationAurelia, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundationAurelia, \"defaultAdapter\", {\n        /**\n         * See {@link MDCSelectAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                activateBottomLine: function () { return undefined; },\n                deactivateBottomLine: function () { return undefined; },\n                getSelectedIndex: function () { return -1; },\n                setSelectedIndex: function () { return undefined; },\n                hasLabel: function () { return false; },\n                floatLabel: function () { return undefined; },\n                getLabelWidth: function () { return 0; },\n                setLabelRequired: function () { return undefined; },\n                hasOutline: function () { return false; },\n                notchOutline: function () { return undefined; },\n                closeOutline: function () { return undefined; },\n                setRippleCenter: function () { return undefined; },\n                notifyChange: function () { return undefined; },\n                setSelectedText: function () { return undefined; },\n                isSelectAnchorFocused: function () { return false; },\n                getSelectAnchorAttr: function () { return ''; },\n                setSelectAnchorAttr: function () { return undefined; },\n                removeSelectAnchorAttr: function () { return undefined; },\n                addMenuClass: function () { return undefined; },\n                removeMenuClass: function () { return undefined; },\n                openMenu: function () { return undefined; },\n                closeMenu: function () { return undefined; },\n                getAnchorElement: function () { return null; },\n                setMenuAnchorElement: function () { return undefined; },\n                setMenuAnchorCorner: function () { return undefined; },\n                setMenuWrapFocus: function () { return undefined; },\n                focusMenuItemAtIndex: function () { return undefined; },\n                getMenuItemCount: function () { return 0; },\n                getMenuItemValues: function () { return []; },\n                getMenuItemTextAtIndex: function () { return ''; },\n                isTypeaheadInProgress: function () { return false; },\n                typeaheadMatchItem: function () { return -1; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** Returns the index of the currently selected menu item, or -1 if none. */\n    MDCSelectFoundationAurelia.prototype.getSelectedIndex = function () {\n        return this.adapter.getSelectedIndex();\n    };\n    MDCSelectFoundationAurelia.prototype.setSelectedIndex = function (index, closeMenu, skipNotify) {\n        if (closeMenu === void 0) { closeMenu = false; }\n        if (skipNotify === void 0) { skipNotify = false; }\n        if (index >= this.adapter.getMenuItemCount()) {\n            return;\n        }\n        // !!! MODIFIED FOR AURELIA TO SUPPORT TEXT IN \"EMPTY\" ITEMS !!!\n        var menuItemValues = this.adapter.getMenuItemValues();\n        if (index === numbers.UNSET_INDEX || menuItemValues[index] === undefined || menuItemValues[index] === null) {\n            this.adapter.setSelectedText('');\n        }\n        else {\n            this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());\n        }\n        this.adapter.setSelectedIndex(index);\n        if (closeMenu) {\n            this.adapter.closeMenu();\n        }\n        if (!skipNotify && this.lastSelectedIndex !== index) {\n            this.handleChange();\n        }\n        this.lastSelectedIndex = index;\n    };\n    // !!! MODIFIED FOR AURELIA !!!\n    MDCSelectFoundationAurelia.prototype.setValue = function (value, skipNotify) {\n        if (skipNotify === void 0) { skipNotify = false; }\n        var index = this.adapter.getMenuItemValues().indexOf(value);\n        this.setSelectedIndex(index, /** closeMenu */ false, skipNotify);\n    };\n    // !!! MODIFIED FOR AURELIA !!!\n    MDCSelectFoundationAurelia.prototype.getValue = function () {\n        var index = this.adapter.getSelectedIndex();\n        var menuItemValues = this.adapter.getMenuItemValues();\n        return index !== numbers.UNSET_INDEX ? menuItemValues[index] : undefined;\n    };\n    MDCSelectFoundationAurelia.prototype.getDisabled = function () {\n        return this.disabled;\n    };\n    MDCSelectFoundationAurelia.prototype.setDisabled = function (isDisabled) {\n        this.disabled = isDisabled;\n        if (this.disabled) {\n            this.adapter.addClass(cssClasses.DISABLED);\n            this.adapter.closeMenu();\n        }\n        else {\n            this.adapter.removeClass(cssClasses.DISABLED);\n        }\n        if (this.leadingIcon) {\n            this.leadingIcon.setDisabled(this.disabled);\n        }\n        if (this.disabled) {\n            // Prevent click events from focusing select. Simply pointer-events: none\n            // is not enough since screenreader clicks may bypass this.\n            this.adapter.removeSelectAnchorAttr('tabindex');\n        }\n        else {\n            this.adapter.setSelectAnchorAttr('tabindex', '0');\n        }\n        this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());\n    };\n    /** Opens the menu. */\n    MDCSelectFoundationAurelia.prototype.openMenu = function () {\n        this.adapter.addClass(cssClasses.ACTIVATED);\n        this.adapter.openMenu();\n        this.isMenuOpen = true;\n        this.adapter.setSelectAnchorAttr('aria-expanded', 'true');\n    };\n    /**\n     * @param content Sets the content of the helper text.\n     */\n    MDCSelectFoundationAurelia.prototype.setHelperTextContent = function (content) {\n        if (this.helperText) {\n            this.helperText.setContent(content);\n        }\n    };\n    /**\n     * Re-calculates if the notched outline should be notched and if the label\n     * should float.\n     */\n    MDCSelectFoundationAurelia.prototype.layout = function () {\n        if (this.adapter.hasLabel()) {\n            var optionHasValue = this.getValue() !== undefined; // !!! MODIFIED FOR AURELIA !!!\n            var isFocused = this.adapter.hasClass(cssClasses.FOCUSED);\n            var shouldFloatAndNotch = optionHasValue || isFocused;\n            var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n            this.notchOutline(shouldFloatAndNotch);\n            this.adapter.floatLabel(shouldFloatAndNotch);\n            this.adapter.setLabelRequired(isRequired);\n        }\n    };\n    /**\n     * Synchronizes the list of options with the state of the foundation. Call\n     * this whenever menu options are dynamically updated.\n     */\n    MDCSelectFoundationAurelia.prototype.layoutOptions = function () {\n        var menuItemValues = this.adapter.getMenuItemValues();\n        var selectedIndex = menuItemValues.indexOf(this.getValue());\n        this.setSelectedIndex(selectedIndex, /** closeMenu */ false, /** skipNotify */ true);\n    };\n    MDCSelectFoundationAurelia.prototype.handleMenuOpened = function () {\n        if (this.adapter.getMenuItemValues().length === 0) {\n            return;\n        }\n        // Menu should open to the last selected element, should open to first menu item otherwise.\n        var selectedIndex = this.getSelectedIndex();\n        var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;\n        this.adapter.focusMenuItemAtIndex(focusItemIndex);\n    };\n    MDCSelectFoundationAurelia.prototype.handleMenuClosed = function () {\n        this.adapter.removeClass(cssClasses.ACTIVATED);\n        this.isMenuOpen = false;\n        this.adapter.setSelectAnchorAttr('aria-expanded', 'false');\n        // Unfocus the select if menu is closed without a selection\n        if (!this.adapter.isSelectAnchorFocused()) {\n            this.blur();\n        }\n    };\n    /**\n     * Handles value changes, via change event or programmatic updates.\n     */\n    MDCSelectFoundationAurelia.prototype.handleChange = function () {\n        this.layout();\n        this.adapter.notifyChange(this.getValue());\n        var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n        if (isRequired && this.useDefaultValidation) {\n            this.setValid(this.isValid());\n        }\n    };\n    MDCSelectFoundationAurelia.prototype.handleMenuItemAction = function (index) {\n        this.setSelectedIndex(index, /** closeMenu */ true);\n    };\n    /**\n     * Handles focus events from select element.\n     */\n    MDCSelectFoundationAurelia.prototype.handleFocus = function () {\n        this.adapter.addClass(cssClasses.FOCUSED);\n        this.layout();\n        this.adapter.activateBottomLine();\n    };\n    /**\n     * Handles blur events from select element.\n     */\n    MDCSelectFoundationAurelia.prototype.handleBlur = function () {\n        if (this.isMenuOpen) {\n            return;\n        }\n        this.blur();\n    };\n    MDCSelectFoundationAurelia.prototype.handleClick = function (normalizedX) {\n        if (this.disabled) {\n            return;\n        }\n        if (this.isMenuOpen) {\n            this.adapter.closeMenu();\n            return;\n        }\n        this.adapter.setRippleCenter(normalizedX);\n        this.openMenu();\n    };\n    /**\n     * Handles keydown events on select element. Depending on the type of\n     * character typed, does typeahead matching or opens menu.\n     */\n    MDCSelectFoundationAurelia.prototype.handleKeydown = function (event) {\n        if (this.isMenuOpen || !this.adapter.hasClass(cssClasses.FOCUSED)) {\n            return;\n        }\n        var isEnter = normalizeKey(event) === KEY.ENTER;\n        var isSpace = normalizeKey(event) === KEY.SPACEBAR;\n        var arrowUp = normalizeKey(event) === KEY.ARROW_UP;\n        var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;\n        // Typeahead\n        if (!isSpace && event.key && event.key.length === 1 ||\n            isSpace && this.adapter.isTypeaheadInProgress()) {\n            var key = isSpace ? ' ' : event.key;\n            var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());\n            if (typeaheadNextIndex >= 0) {\n                this.setSelectedIndex(typeaheadNextIndex);\n            }\n            event.preventDefault();\n            return;\n        }\n        if (!isEnter && !isSpace && !arrowUp && !arrowDown) {\n            return;\n        }\n        // Increment/decrement index as necessary and open menu.\n        if (arrowUp && this.getSelectedIndex() > 0) {\n            this.setSelectedIndex(this.getSelectedIndex() - 1);\n        }\n        else if (arrowDown &&\n            this.getSelectedIndex() < this.adapter.getMenuItemCount() - 1) {\n            this.setSelectedIndex(this.getSelectedIndex() + 1);\n        }\n        this.openMenu();\n        event.preventDefault();\n    };\n    /**\n     * Opens/closes the notched outline.\n     */\n    MDCSelectFoundationAurelia.prototype.notchOutline = function (openNotch) {\n        if (!this.adapter.hasOutline()) {\n            return;\n        }\n        var isFocused = this.adapter.hasClass(cssClasses.FOCUSED);\n        if (openNotch) {\n            var labelScale = numbers.LABEL_SCALE;\n            var labelWidth = this.adapter.getLabelWidth() * labelScale;\n            this.adapter.notchOutline(labelWidth);\n        }\n        else if (!isFocused) {\n            this.adapter.closeOutline();\n        }\n    };\n    /**\n     * Sets the aria label of the leading icon.\n     */\n    MDCSelectFoundationAurelia.prototype.setLeadingIconAriaLabel = function (label) {\n        if (this.leadingIcon) {\n            this.leadingIcon.setAriaLabel(label);\n        }\n    };\n    /**\n     * Sets the text content of the leading icon.\n     */\n    MDCSelectFoundationAurelia.prototype.setLeadingIconContent = function (content) {\n        if (this.leadingIcon) {\n            this.leadingIcon.setContent(content);\n        }\n    };\n    MDCSelectFoundationAurelia.prototype.setUseDefaultValidation = function (useDefaultValidation) {\n        this.useDefaultValidation = useDefaultValidation;\n    };\n    MDCSelectFoundationAurelia.prototype.setValid = function (isValid) {\n        if (!this.useDefaultValidation) {\n            this.customValidity = isValid;\n        }\n        this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());\n        if (isValid) {\n            this.adapter.removeClass(cssClasses.INVALID);\n            this.adapter.removeMenuClass(cssClasses.MENU_INVALID);\n        }\n        else {\n            this.adapter.addClass(cssClasses.INVALID);\n            this.adapter.addMenuClass(cssClasses.MENU_INVALID);\n        }\n        this.syncHelperTextValidity(isValid);\n    };\n    MDCSelectFoundationAurelia.prototype.isValid = function () {\n        if (this.useDefaultValidation &&\n            this.adapter.hasClass(cssClasses.REQUIRED) &&\n            !this.adapter.hasClass(cssClasses.DISABLED)) {\n            // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n            // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n            return this.getSelectedIndex() !== numbers.UNSET_INDEX &&\n                (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));\n        }\n        return this.customValidity;\n    };\n    MDCSelectFoundationAurelia.prototype.setRequired = function (isRequired) {\n        if (isRequired) {\n            this.adapter.addClass(cssClasses.REQUIRED);\n        }\n        else {\n            this.adapter.removeClass(cssClasses.REQUIRED);\n        }\n        this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());\n        this.adapter.setLabelRequired(isRequired);\n    };\n    MDCSelectFoundationAurelia.prototype.getRequired = function () {\n        return this.adapter.getSelectAnchorAttr('aria-required') === 'true';\n    };\n    MDCSelectFoundationAurelia.prototype.init = function () {\n        var anchorEl = this.adapter.getAnchorElement();\n        if (anchorEl) {\n            this.adapter.setMenuAnchorElement(anchorEl);\n            this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);\n        }\n        this.adapter.setMenuWrapFocus(false);\n        this.setDisabled(this.adapter.hasClass(cssClasses.DISABLED));\n        this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses.INVALID));\n        this.layout();\n        this.layoutOptions();\n    };\n    /**\n     * Unfocuses the select component.\n     */\n    MDCSelectFoundationAurelia.prototype.blur = function () {\n        this.adapter.removeClass(cssClasses.FOCUSED);\n        this.layout();\n        this.adapter.deactivateBottomLine();\n        var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n        if (isRequired && this.useDefaultValidation) {\n            this.setValid(this.isValid());\n        }\n    };\n    MDCSelectFoundationAurelia.prototype.syncHelperTextValidity = function (isValid) {\n        if (!this.helperText) {\n            return;\n        }\n        this.helperText.setValidity(isValid);\n        var helperTextVisible = this.helperText.isVisible();\n        var helperTextId = this.helperText.getId();\n        if (helperTextVisible && helperTextId) {\n            this.adapter.setSelectAnchorAttr(strings.ARIA_DESCRIBEDBY, helperTextId);\n        }\n        else {\n            // Needed because screenreaders will read labels pointed to by\n            // `aria-describedby` even if they are `aria-hidden`.\n            this.adapter.removeSelectAnchorAttr(strings.ARIA_DESCRIBEDBY);\n        }\n    };\n    return MDCSelectFoundationAurelia;\n}(MDCFoundation));\nexport { MDCSelectFoundationAurelia };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSelectFoundationAurelia;\n//# sourceMappingURL=mdc-select-foundation-aurelia.js.map","import { __decorate, __extends, __metadata } from \"tslib\";\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { helperTextCssClasses, MDCSelectHelperTextFoundation } from '@material/select';\nimport { inject, customElement, useView, PLATFORM } from 'aurelia-framework';\nimport { bindable } from 'aurelia-typed-observable-plugin';\nexport var mdcHelperTextCssClasses = {\n    ROOT: 'mdc-select-helper-text'\n};\nvar MdcSelectHelperText = /** @class */ (function (_super) {\n    __extends(MdcSelectHelperText, _super);\n    function MdcSelectHelperText() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.helperTextCssClasses = helperTextCssClasses;\n        _this.ROOT = mdcHelperTextCssClasses.ROOT;\n        return _this;\n    }\n    Object.defineProperty(MdcSelectHelperText.prototype, \"foundationForTextField\", {\n        // Provided for access by MDCTextField component\n        get: function () {\n            return this.foundation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MdcSelectHelperText.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            getAttr: function (attr) { return _this.root.getAttribute(attr); },\n            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },\n            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },\n            setContent: function (content) {\n                _this.root.textContent = content;\n            },\n        };\n        return new MDCSelectHelperTextFoundation(adapter);\n    };\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelectHelperText.prototype, \"persistent\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelectHelperText.prototype, \"validation\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", Array)\n    ], MdcSelectHelperText.prototype, \"errors\", void 0);\n    MdcSelectHelperText = __decorate([\n        inject(Element),\n        useView(PLATFORM.moduleName('./mdc-select-helper-text.html')),\n        customElement(mdcHelperTextCssClasses.ROOT)\n    ], MdcSelectHelperText);\n    return MdcSelectHelperText;\n}(MdcComponent));\nexport { MdcSelectHelperText };\n//# sourceMappingURL=mdc-select-helper-text.js.map","import { __awaiter, __decorate, __extends, __generator } from \"tslib\";\nimport { customAttribute, inject } from 'aurelia-framework';\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { MDCSelectIconFoundation } from '@material/select';\nexport var mdcIconStrings = {\n    ATTRIBUTE: 'mdc-select-icon'\n};\nvar MdcSelectIcon = /** @class */ (function (_super) {\n    __extends(MdcSelectIcon, _super);\n    function MdcSelectIcon() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    MdcSelectIcon.prototype.initialise = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.root.classList.add('mdc-select__icon');\n                return [2 /*return*/];\n            });\n        });\n    };\n    MdcSelectIcon.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            getAttr: function (attr) { return _this.root.getAttribute(attr); },\n            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },\n            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },\n            setContent: function (content) {\n                _this.root.textContent = content;\n            },\n            registerInteractionHandler: function (evtType, handler) { return _this.listen(evtType, handler); },\n            deregisterInteractionHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },\n            notifyIconAction: function () { return _this.emit(MDCSelectIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */); },\n        };\n        return new MDCSelectIconFoundation(adapter);\n    };\n    MdcSelectIcon = __decorate([\n        inject(Element),\n        customAttribute(mdcIconStrings.ATTRIBUTE)\n    ], MdcSelectIcon);\n    return MdcSelectIcon;\n}(MdcComponent));\nexport { MdcSelectIcon };\n//# sourceMappingURL=mdc-select-icon.js.map","import { __decorate, __metadata } from \"tslib\";\nimport { DOM } from 'aurelia-pal';\nimport { subscriberCollection, EventSubscriber } from 'aurelia-binding';\n/**\n * @hidden\n * The observer only passes values to the element if options has been set at least once.\n * When the options are set for the first time the observer passes the value to the element.\n * Subsequent options changes pull the value from the element.\n * Subsequent value changes are passed to the element.\n */\nvar MdcSelectValueObserver = /** @class */ (function () {\n    function MdcSelectValueObserver(element, handler) {\n        this.handler = handler;\n        this.element = element;\n    }\n    MdcSelectValueObserver.prototype.setElementValue = function (skipNotify) {\n        if (skipNotify === void 0) { skipNotify = false; }\n        // do not pass the value to the element if options has never been set\n        // the value will be passed on when options do arrive\n        if (this.optionsWereSet) {\n            this.element.au.controller.viewModel.setValue(this.value, skipNotify);\n        }\n    };\n    MdcSelectValueObserver.prototype.getValue = function () {\n        return this.value;\n    };\n    MdcSelectValueObserver.prototype.setValue = function (newValue) {\n        if (this.value === newValue) {\n            return;\n        }\n        // assign and sync element.\n        this.oldValue = this.value;\n        this.value = newValue;\n        this.setElementValue();\n        this.notify();\n    };\n    MdcSelectValueObserver.prototype.synchronizeValue = function () {\n        var value = this.element.value;\n        if (value !== this.value) {\n            this.oldValue = this.value;\n            this.value = value;\n            this.notify();\n        }\n    };\n    MdcSelectValueObserver.prototype.notify = function () {\n        var oldValue = this.oldValue;\n        var newValue = this.value;\n        this.callSubscribers(newValue, oldValue);\n    };\n    MdcSelectValueObserver.prototype.handleEvent = function () {\n        this.synchronizeValue();\n    };\n    MdcSelectValueObserver.prototype.subscribe = function (context, callable) {\n        if (!this.hasSubscribers()) {\n            this.handler.subscribe(this.element, this);\n        }\n        this.addSubscriber(context, callable);\n    };\n    MdcSelectValueObserver.prototype.unsubscribe = function (context, callable) {\n        if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\n            this.handler.dispose();\n        }\n    };\n    MdcSelectValueObserver.prototype.bind = function () {\n        var _this = this;\n        var menu = this.element.querySelector('.mdc-menu');\n        this.optionsWereSet = !!menu.querySelector('mdc-list-item');\n        this.domObserver = DOM.createMutationObserver(function (records) {\n            if (records.find(function (x) { return x.type === 'childList'\n                && (Array.from(x.addedNodes).find(function (y) { return y.tagName === 'MDC-LIST-ITEM'; })\n                    || Array.from(x.removedNodes).find(function (y) { return y.tagName === 'MDC-LIST-ITEM'; })); })) {\n                if (_this.optionsWereSet) {\n                    if (_this.element.value != _this.value) {\n                        _this.element.value = undefined;\n                    }\n                }\n                else {\n                    _this.optionsWereSet = true;\n                    // if options are set for the first time pass the current value to the element\n                    _this.setElementValue(true);\n                }\n                _this.synchronizeValue();\n            }\n        });\n        this.domObserver.observe(menu, { childList: true, subtree: true, characterData: true });\n    };\n    MdcSelectValueObserver.prototype.unbind = function () {\n        var _a;\n        this.optionsWereSet = false;\n        (_a = this.domObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this.domObserver = null;\n    };\n    MdcSelectValueObserver = __decorate([\n        subscriberCollection(),\n        __metadata(\"design:paramtypes\", [Element, EventSubscriber])\n    ], MdcSelectValueObserver);\n    return MdcSelectValueObserver;\n}());\nexport { MdcSelectValueObserver };\n//# sourceMappingURL=mdc-select-value-observer.js.map","import { __assign, __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { cssClasses, strings } from '@material/select';\nimport { inject, useView, customElement, processContent, children, bindingMode, TaskQueue } from 'aurelia-framework';\nimport { PLATFORM } from 'aurelia-pal';\nimport { mdcIconStrings } from './mdc-select-icon';\nimport { mdcHelperTextCssClasses } from './mdc-select-helper-text/mdc-select-helper-text';\nimport { bindable } from 'aurelia-typed-observable-plugin';\nimport { MDCSelectFoundationAurelia } from './mdc-select-foundation-aurelia';\nimport { MdcDefaultSelectConfiguration } from './mdc-default-select-configuration';\nstrings.CHANGE_EVENT = strings.CHANGE_EVENT.toLowerCase();\nvar selectId = 0;\n/**\n * @selector mdc-select\n * @emits mdcselect:change | Emitted if user changed the value\n */\nvar MdcSelect = /** @class */ (function (_super) {\n    __extends(MdcSelect, _super);\n    function MdcSelect(root, taskQueue, defaultConfiguration) {\n        var _this = _super.call(this, root) || this;\n        _this.taskQueue = taskQueue;\n        _this.defaultConfiguration = defaultConfiguration;\n        _this.id = \"mdc-select-\".concat(++selectId);\n        _this.errors = new Map();\n        /** Styles the select as an outlined select */\n        _this.outlined = _this.defaultConfiguration.outlined;\n        defineMdcSelectElementApis(_this.root);\n        return _this;\n    }\n    MdcSelect_1 = MdcSelect;\n    MdcSelect.processContent = function (_viewCompiler, _resources, element) {\n        // move icon to the slot - this allows omitting slot specification\n        var leadingIcon = element.querySelector(\"[\".concat(mdcIconStrings.ATTRIBUTE, \"]\"));\n        leadingIcon === null || leadingIcon === void 0 ? void 0 : leadingIcon.setAttribute('slot', 'leading-icon');\n        return true;\n    };\n    MdcSelect.prototype.labelChanged = function () {\n        var _this = this;\n        this.taskQueue.queueTask(function () { var _a; return (_a = _this.foundation) === null || _a === void 0 ? void 0 : _a.layout(); });\n    };\n    MdcSelect.prototype.outlinedChanged = function () {\n        var _this = this;\n        this.taskQueue.queueTask(function () { var _a; return (_a = _this.foundation) === null || _a === void 0 ? void 0 : _a.layout(); });\n    };\n    MdcSelect.prototype.requiredChanged = function () {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _d.sent();\n                        if (this.required) {\n                            (_a = this.selectAnchor) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-required', 'true');\n                        }\n                        else {\n                            (_b = this.selectAnchor) === null || _b === void 0 ? void 0 : _b.removeAttribute('aria-required');\n                        }\n                        (_c = this.foundation) === null || _c === void 0 ? void 0 : _c.setRequired(this.required);\n                        this.taskQueue.queueTask(function () { var _a; return (_a = _this.foundation) === null || _a === void 0 ? void 0 : _a.layout(); });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSelect.prototype.disabledChanged = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _b.sent();\n                        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setDisabled(this.disabled);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(MdcSelect.prototype, \"value\", {\n        get: function () {\n            if (this.foundation) {\n                return this.foundation.getValue();\n            }\n            else {\n                return this._value;\n            }\n        },\n        set: function (value) {\n            this.setValue(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MdcSelect.prototype.setValue = function (value, skipNotify) {\n        if (skipNotify === void 0) { skipNotify = false; }\n        this._value = value;\n        if (this.foundation) {\n            this.foundation.setValue(value, skipNotify);\n            this.foundation.layout();\n        }\n    };\n    Object.defineProperty(MdcSelect.prototype, \"valid\", {\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.isValid()) !== null && _b !== void 0 ? _b : true;\n        },\n        set: function (value) {\n            var _a;\n            (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setValid(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MdcSelect.prototype, \"selectedIndex\", {\n        get: function () {\n            return this.foundation.getSelectedIndex();\n        },\n        set: function (selectedIndex) {\n            var _a;\n            (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setSelectedIndex(selectedIndex, /** closeMenu */ true);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MdcSelect.prototype.addError = function (error) {\n        this.errors.set(error, true);\n        this.valid = false;\n    };\n    MdcSelect.prototype.removeError = function (error) {\n        this.errors.delete(error);\n        this.valid = this.errors.size === 0;\n    };\n    MdcSelect.prototype.renderErrors = function () {\n        var helperText = this.root.nextElementSibling;\n        if ((helperText === null || helperText === void 0 ? void 0 : helperText.tagName) === 'MDC-SELECT-HELPER-TEXT') {\n            helperText.au.controller.viewModel.errors = Array.from(this.errors.keys())\n                .filter(function (x) { return x.message !== null; }).map(function (x) { return x.message; });\n        }\n    };\n    MdcSelect.prototype.initialise = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var leadingIconEl, nextSibling;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        leadingIconEl = this.root.querySelector(\"[\".concat(mdcIconStrings.ATTRIBUTE, \"]\"));\n                        this.leadingIcon = leadingIconEl === null || leadingIconEl === void 0 ? void 0 : leadingIconEl.au['mdc-select-icon'].viewModel;\n                        nextSibling = this.root.nextElementSibling;\n                        if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) === mdcHelperTextCssClasses.ROOT.toUpperCase()) {\n                            this.helperText = nextSibling.au.controller.viewModel;\n                        }\n                        return [4 /*yield*/, Promise.all([(_a = this.helperText) === null || _a === void 0 ? void 0 : _a.initialised, this.menu.initialised].filter(function (x) { return x; }))];\n                    case 1:\n                        _b.sent();\n                        this.menu.list_.singleSelection = true;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSelect.prototype.initialSyncWithDOM = function () {\n        var _a, _b;\n        // set initial value without emitting change events\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setValue(this._value, true);\n        (_b = this.foundation) === null || _b === void 0 ? void 0 : _b.layout();\n        this.errors = new Map();\n        this.valid = true;\n    };\n    MdcSelect.prototype.getDefaultFoundation = function () {\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = __assign(__assign(__assign(__assign({}, this.getSelectAdapterMethods()), this.getCommonAdapterMethods()), this.getOutlineAdapterMethods()), this.getLabelAdapterMethods());\n        return new MDCSelectFoundationAurelia(adapter, this.getFoundationMap());\n    };\n    MdcSelect.prototype.getSelectAdapterMethods = function () {\n        var _this = this;\n        return {\n            setSelectedText: function (text) {\n                _this.selectedText.textContent = text;\n            },\n            isSelectAnchorFocused: function () { return document.activeElement === _this.selectAnchor; },\n            getSelectAnchorAttr: function (attr) { return _this.selectAnchor.getAttribute(attr); },\n            setSelectAnchorAttr: function (attr, value) {\n                _this.selectAnchor.setAttribute(attr, value);\n            },\n            removeSelectAnchorAttr: function (attr) {\n                _this.selectAnchor.removeAttribute(attr);\n            },\n            addMenuClass: function (className) {\n                var _a;\n                (_a = _this.menuElement) === null || _a === void 0 ? void 0 : _a.classList.add(className);\n            },\n            removeMenuClass: function (className) {\n                var _a;\n                (_a = _this.menuElement) === null || _a === void 0 ? void 0 : _a.classList.remove(className);\n            },\n            openMenu: function () {\n                _this.menu.open = true;\n                if ((_this.hoistToBody || _this.fixed) && !_this.naturalWidth) {\n                    _this.menu.root.style.minWidth = _this.menu.root.style.maxWidth = \"\".concat(_this.root.clientWidth, \"px\");\n                }\n            },\n            closeMenu: function () { _this.menu.open = false; },\n            getAnchorElement: function () { return _this.root.querySelector(strings.SELECT_ANCHOR_SELECTOR); },\n            setMenuAnchorElement: function (anchorEl) {\n                _this.menu.anchor = anchorEl;\n            },\n            setMenuAnchorCorner: function (anchorCorner) {\n                _this.menu.setAnchorCorner(anchorCorner);\n            },\n            setMenuWrapFocus: function (wrapFocus) {\n                _this.menu.wrapFocus = wrapFocus;\n            },\n            getSelectedIndex: function () {\n                var index = _this.menu.selectedIndex;\n                return index instanceof Array ? index[0] : index;\n            },\n            setSelectedIndex: function (index) {\n                _this.menu.selectedIndex = index;\n            },\n            removeAttributeAtIndex: function (index, attributeName) {\n                _this.menu.items[index].removeAttribute(attributeName);\n            },\n            focusMenuItemAtIndex: function (index) {\n                _this.menu.items[index].focus();\n            },\n            getMenuItemCount: function () { return _this.menu.items.length; },\n            getMenuItemValues: function () { return _this.menu.items.map(function (x) { return x.au.controller.viewModel.value; }); },\n            getMenuItemTextAtIndex: function (index) { return _this.menu.getPrimaryTextAtIndex(index); },\n            isTypeaheadInProgress: function () { return _this.menu.typeaheadInProgress; },\n            typeaheadMatchItem: function (nextChar, startingIndex) { return _this.menu.typeaheadMatchItem(nextChar, startingIndex); },\n        };\n    };\n    MdcSelect.prototype.getCommonAdapterMethods = function () {\n        var _this = this;\n        return {\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            setRippleCenter: function (normalizedX) { var _a; return (_a = _this.lineRipple) === null || _a === void 0 ? void 0 : _a.setRippleCenter(normalizedX); },\n            activateBottomLine: function () { var _a; return (_a = _this.lineRipple) === null || _a === void 0 ? void 0 : _a.activate(); },\n            deactivateBottomLine: function () { var _a; return (_a = _this.lineRipple) === null || _a === void 0 ? void 0 : _a.deactivate(); },\n            notifyChange: function (value) {\n                var index = _this.selectedIndex;\n                _this.emit(strings.CHANGE_EVENT, { value: value, index: index }, true /* shouldBubble  */);\n                _this.emit('change', { value: value, index: index }, true /* shouldBubble  */);\n            },\n        };\n    };\n    MdcSelect.prototype.getOutlineAdapterMethods = function () {\n        var _this = this;\n        return {\n            hasOutline: function () { return Boolean(_this.outline); },\n            notchOutline: function (labelWidth) { var _a; return (_a = _this.outline) === null || _a === void 0 ? void 0 : _a.notch(labelWidth); },\n            closeOutline: function () { var _a; return (_a = _this.outline) === null || _a === void 0 ? void 0 : _a.closeNotch(); },\n        };\n    };\n    MdcSelect.prototype.getLabelAdapterMethods = function () {\n        var _this = this;\n        return {\n            hasLabel: function () { return !!_this.mdcLabel; },\n            floatLabel: function (shouldFloat) { var _a; return (_a = _this.mdcLabel) === null || _a === void 0 ? void 0 : _a.float(shouldFloat); },\n            getLabelWidth: function () { return _this.mdcLabel ? _this.mdcLabel.getWidth() : 0; },\n            setLabelRequired: function (isRequired) { var _a; return (_a = _this.mdcLabel) === null || _a === void 0 ? void 0 : _a.setRequired(isRequired); },\n        };\n    };\n    MdcSelect.prototype.handleChange = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleChange();\n        this.emit('change', {}, true);\n    };\n    MdcSelect.prototype.handleFocus = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleFocus();\n    };\n    MdcSelect.prototype.handleBlur = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleBlur();\n        // if class is set it means the menu is open,\n        // do not emit blur since \"conceptually\" the element is still active\n        if (!this.root.classList.contains(cssClasses.FOCUSED)) {\n            this.emit('blur', {}, true);\n        }\n    };\n    MdcSelect.prototype.handleClick = function (evt) {\n        var _a;\n        this.selectAnchor.focus();\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleClick(this.getNormalizedXCoordinate(evt));\n    };\n    MdcSelect.prototype.handleKeydown = function (evt) {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleKeydown(evt);\n        return true;\n    };\n    MdcSelect.prototype.handleMenuItemAction = function (evt) {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleMenuItemAction(evt.detail.index);\n    };\n    MdcSelect.prototype.handleMenuOpened = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleMenuOpened();\n    };\n    MdcSelect.prototype.handleMenuClosed = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleMenuClosed();\n        if (!this.root.classList.contains(cssClasses.FOCUSED)) {\n            this.emit('blur', {}, true);\n        }\n    };\n    MdcSelect.prototype.handleItemsChanged = function () {\n        var _a, _b;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.layoutOptions();\n        (_b = this.foundation) === null || _b === void 0 ? void 0 : _b.layout();\n    };\n    MdcSelect.prototype.focus = function () {\n        this.selectAnchor.focus();\n    };\n    MdcSelect.prototype.blur = function () {\n        this.selectAnchor.blur();\n    };\n    /**\n     * @hidden\n     * Calculates where the line ripple should start based on the x coordinate within the component.\n     */\n    MdcSelect.prototype.getNormalizedXCoordinate = function (evt) {\n        var targetClientRect = evt.target.getBoundingClientRect();\n        var xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;\n        return xCoordinate - targetClientRect.left;\n    };\n    MdcSelect.prototype.isTouchEvent = function (evt) {\n        return Boolean(evt.touches);\n    };\n    /**\n     * @hidden\n     * Returns a map of all subcomponents to subfoundations.\n     */\n    MdcSelect.prototype.getFoundationMap = function () {\n        var _a, _b;\n        return {\n            helperText: (_a = this.helperText) === null || _a === void 0 ? void 0 : _a.foundation,\n            leadingIcon: (_b = this.leadingIcon) === null || _b === void 0 ? void 0 : _b.foundation\n        };\n    };\n    var MdcSelect_1;\n    __decorate([\n        children('mdc-list-items'),\n        __metadata(\"design:type\", Array)\n    ], MdcSelect.prototype, \"items\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSelect.prototype, \"label\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelect.prototype, \"outlined\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelect.prototype, \"required\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelect.prototype, \"disabled\", void 0);\n    __decorate([\n        bindable.booleanAttr({ defaultBindingMode: bindingMode.oneTime }),\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelect.prototype, \"hoistToBody\", void 0);\n    __decorate([\n        bindable.booleanAttr({ defaultBindingMode: bindingMode.oneTime }),\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelect.prototype, \"fixed\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", Object)\n    ], MdcSelect.prototype, \"anchorMargin\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSelect.prototype, \"naturalWidth\", void 0);\n    MdcSelect = MdcSelect_1 = __decorate([\n        inject(Element, TaskQueue, MdcDefaultSelectConfiguration),\n        useView(PLATFORM.moduleName('./mdc-select.html')),\n        customElement(cssClasses.ROOT),\n        processContent(MdcSelect_1.processContent),\n        __metadata(\"design:paramtypes\", [HTMLElement, TaskQueue, MdcDefaultSelectConfiguration])\n    ], MdcSelect);\n    return MdcSelect;\n}(MdcComponent));\nexport { MdcSelect };\nfunction defineMdcSelectElementApis(element) {\n    Object.defineProperties(element, {\n        value: {\n            get: function () {\n                return this.au.controller.viewModel.value;\n            },\n            set: function (value) {\n                // aurelia binding converts \"undefined\" and \"null\" into empty string\n                // this does not translate well into \"empty\" menu items when several selects are bound to the same field\n                this.au.controller.viewModel.value = value === '' ? undefined : value;\n            },\n            configurable: true\n        },\n        options: {\n            get: function () {\n                return this.au.controller.viewModel.root.querySelectorAll('.mdc-list-item');\n            },\n            configurable: true\n        },\n        selectedIndex: {\n            get: function () {\n                return this.au.controller.viewModel.selectedIndex;\n            },\n            set: function (value) {\n                this.au.controller.viewModel.selectedIndex = value;\n            },\n            configurable: true\n        },\n        valid: {\n            get: function () {\n                return this.au.controller.viewModel.valid;\n            },\n            set: function (value) {\n                this.au.controller.viewModel.valid = value;\n            },\n            configurable: true\n        },\n        addError: {\n            value: function (error) {\n                this.au.controller.viewModel.addError(error);\n            },\n            configurable: true\n        },\n        removeError: {\n            value: function (error) {\n                this.au.controller.viewModel.removeError(error);\n            },\n            configurable: true\n        },\n        renderErrors: {\n            value: function () {\n                this.au.controller.viewModel.renderErrors();\n            },\n            configurable: true\n        },\n        focus: {\n            value: function () {\n                this.au.controller.viewModel.focus();\n            },\n            configurable: true\n        },\n        blur: {\n            value: function () {\n                this.au.controller.viewModel.blur();\n            },\n            configurable: true\n        }\n    });\n}\n//# sourceMappingURL=mdc-select.js.map","import { PLATFORM, bindingMode, ValueAttributeObserver, EventSubscriber } from 'aurelia-framework';\nimport { MdcComponentAdapters } from '@aurelia-mdc-web/base';\nimport { events } from '@material/slider';\nexport { MdcSlider } from './mdc-slider';\nexport function configure(config) {\n    config.container.get(MdcComponentAdapters).registerMdcElementConfig(checkboxConfig);\n    config.globalResources([\n        PLATFORM.moduleName('./mdc-slider')\n    ]);\n    config.aurelia\n        .use\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/ripple'));\n}\nvar checkboxConfig = {\n    tagName: 'mdc-slider',\n    properties: {\n        value: {\n            defaultBindingMode: bindingMode.twoWay,\n            getObserver: function (element) {\n                return new ValueAttributeObserver(element, 'value', new EventSubscriber([events.CHANGE, events.INPUT]));\n            }\n        },\n        valuestart: {\n            defaultBindingMode: bindingMode.twoWay,\n            getObserver: function (element) {\n                return new ValueAttributeObserver(element, 'valuestart', new EventSubscriber([events.CHANGE, events.INPUT]));\n            }\n        }\n    }\n};\n//# sourceMappingURL=index.js.map","import { __extends } from \"tslib\";\nimport { MDCSliderFoundation } from '@material/slider';\n// overriding lets the rest of the foundation to always get a fresh bounding rect\n// otherwise resizing a container, or moving an element ruins interaction\n// @ts-expect-error rect is private in base class\nvar MdcSliderFoundationAurelia = /** @class */ (function (_super) {\n    __extends(MdcSliderFoundationAurelia, _super);\n    function MdcSliderFoundationAurelia() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MdcSliderFoundationAurelia.prototype, \"rect\", {\n        get: function () {\n            return this.adapter.getBoundingClientRect();\n        },\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        set: function (_) { },\n        enumerable: false,\n        configurable: true\n    });\n    return MdcSliderFoundationAurelia;\n}(MDCSliderFoundation));\nexport { MdcSliderFoundationAurelia };\n//# sourceMappingURL=mdc-slider-foundation-aurelia.js.map","import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { Thumb, cssClasses, TickMark, events, attributes } from '@material/slider';\nimport { bindable } from 'aurelia-typed-observable-plugin';\nimport { inject, useView, PLATFORM, customElement } from 'aurelia-framework';\nimport { MdcSliderFoundationAurelia } from './mdc-slider-foundation-aurelia';\nevents.INPUT = events.INPUT.toLowerCase();\nevents.CHANGE = events.CHANGE.toLowerCase();\nvar MdcSlider = /** @class */ (function (_super) {\n    __extends(MdcSlider, _super);\n    function MdcSlider(root) {\n        var _this = _super.call(this, root) || this;\n        _this.TickMark = TickMark;\n        _this.eventHandlers = [];\n        _this.min = 0;\n        _this.max = 100;\n        _this.step = '1';\n        _this.valueToAriaValueTextFn = null;\n        _this._value = 0;\n        _this._valueStart = 0;\n        defineMdcSliderElementApis(_this.root);\n        return _this;\n    }\n    MdcSlider.prototype.disabledChanged = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _b.sent();\n                        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setDisabled(this.disabled);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSlider.prototype.minChanged = function () {\n        var _a, _b, _c, _d, _e;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _f.sent();\n                        (_b = ((_a = this.startInput) !== null && _a !== void 0 ? _a : this.endInput)) === null || _b === void 0 ? void 0 : _b.setAttribute(attributes.INPUT_MIN, this.min.toString());\n                        (_c = this.foundation) === null || _c === void 0 ? void 0 : _c.destroy();\n                        this.cleanupEventHandlers();\n                        if (this.range && this.valueStart < this.min) {\n                            this.valueStart = this.min;\n                            this.emit(events.CHANGE, { value: this.value, thumb: Thumb.START }, true);\n                        }\n                        if (this.value < this.min) {\n                            this.value = this.min;\n                            this.emit(events.CHANGE, { value: this.value, thumb: Thumb.END }, true);\n                        }\n                        (_d = this.foundation) === null || _d === void 0 ? void 0 : _d.init();\n                        (_e = this.foundation) === null || _e === void 0 ? void 0 : _e.layout();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSlider.prototype.maxChanged = function () {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _e.sent();\n                        (_a = this.endInput) === null || _a === void 0 ? void 0 : _a.setAttribute(attributes.INPUT_MAX, this.max.toString());\n                        (_b = this.foundation) === null || _b === void 0 ? void 0 : _b.destroy();\n                        this.cleanupEventHandlers();\n                        if (this.range && this.valueStart > this.max) {\n                            this.valueStart = this.max;\n                            this.emit(events.CHANGE, { value: this.value, thumb: Thumb.START }, true);\n                        }\n                        if (this.value > this.max) {\n                            this.value = this.max;\n                            this.emit(events.CHANGE, { value: this.value, thumb: Thumb.END }, true);\n                        }\n                        (_c = this.foundation) === null || _c === void 0 ? void 0 : _c.init();\n                        (_d = this.foundation) === null || _d === void 0 ? void 0 : _d.layout();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSlider.prototype.minRangeChanged = function () {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _e.sent();\n                        (_a = this.endInput) === null || _a === void 0 ? void 0 : _a.setAttribute(attributes.DATA_MIN_RANGE, this.minRange.toString());\n                        (_b = this.foundation) === null || _b === void 0 ? void 0 : _b.destroy();\n                        this.cleanupEventHandlers();\n                        if (this.range && this.value - this.valueStart < this.minRange) {\n                            if (this.valueStart + this.minRange < this.max) {\n                                this.value = this.valueStart + this.minRange;\n                            }\n                            else if (this.value - this.minRange > this.min) {\n                                this.valueStart = this.value - this.minRange;\n                            }\n                            this.emit(events.CHANGE, { value: this.value, thumb: Thumb.START }, true);\n                        }\n                        (_c = this.foundation) === null || _c === void 0 ? void 0 : _c.init();\n                        (_d = this.foundation) === null || _d === void 0 ? void 0 : _d.layout();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSlider.prototype.stepChanged = function () {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _e.sent();\n                        (_a = this.startInput) === null || _a === void 0 ? void 0 : _a.setAttribute(attributes.INPUT_STEP, this.step);\n                        (_b = this.endInput) === null || _b === void 0 ? void 0 : _b.setAttribute(attributes.INPUT_STEP, this.step);\n                        (_c = this.foundation) === null || _c === void 0 ? void 0 : _c.destroy();\n                        this.cleanupEventHandlers();\n                        (_d = this.foundation) === null || _d === void 0 ? void 0 : _d.init();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(MdcSlider.prototype, \"value\", {\n        get: function () {\n            if (this.foundation) {\n                return this.foundation.getValue();\n            }\n            else {\n                return this._value;\n            }\n        },\n        set: function (value) {\n            var _a;\n            this._value = value;\n            (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setValue(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"valueStart\", {\n        get: function () {\n            if (this.foundation) {\n                return this.foundation.getValueStart();\n            }\n            else {\n                return this._valueStart;\n            }\n        },\n        set: function (value) {\n            var _a;\n            this._valueStart = value;\n            (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setValueStart(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MdcSlider.prototype.bind = function () { };\n    // eslint-disable-next-line @typescript-eslint/require-await\n    MdcSlider.prototype.initialise = function () {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                // assign initial values explicitly\n                this.endInput.setAttribute(attributes.INPUT_MIN, this.min.toString());\n                this.endInput.setAttribute(attributes.INPUT_MAX, this.max.toString());\n                this.endInput.setAttribute(attributes.INPUT_VALUE, this.value.toString());\n                this.endInput.setAttribute(attributes.INPUT_STEP, this.step);\n                (_a = this.startInput) === null || _a === void 0 ? void 0 : _a.setAttribute(attributes.INPUT_VALUE, this.valueStart.toString());\n                (_b = this.startInput) === null || _b === void 0 ? void 0 : _b.setAttribute(attributes.INPUT_STEP, this.step);\n                return [2 /*return*/];\n            });\n        });\n    };\n    MdcSlider.prototype.initialSyncWithDOM = function () {\n        var _a;\n        this.value = this._value;\n        if (this.range) {\n            this.valueStart = this._valueStart;\n        }\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.layout();\n        this.disabledChanged();\n    };\n    MdcSlider.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take\n        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n        // methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            addThumbClass: function (className, thumb) {\n                var _a;\n                (_a = _this.getThumbEl(thumb)) === null || _a === void 0 ? void 0 : _a.classList.add(className);\n            },\n            removeThumbClass: function (className, thumb) {\n                var _a;\n                (_a = _this.getThumbEl(thumb)) === null || _a === void 0 ? void 0 : _a.classList.remove(className);\n            },\n            getAttribute: function (attribute) { return _this.root.getAttribute(attribute); },\n            getInputValue: function (thumb) { var _a, _b; return (_b = (_a = _this.getInput(thumb)) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : ''; },\n            setInputValue: function (value, thumb) {\n                var thumbInput = _this.getInput(thumb);\n                if (thumbInput) {\n                    thumbInput.value = value;\n                }\n            },\n            getInputAttribute: function (attribute, thumb) { var _a, _b; return (_b = (_a = _this.getInput(thumb)) === null || _a === void 0 ? void 0 : _a.getAttribute(attribute)) !== null && _b !== void 0 ? _b : null; },\n            setInputAttribute: function (attribute, value, thumb) {\n                var _a;\n                (_a = _this.getInput(thumb)) === null || _a === void 0 ? void 0 : _a.setAttribute(attribute, value);\n            },\n            removeInputAttribute: function (attribute, thumb) {\n                var _a;\n                (_a = _this.getInput(thumb)) === null || _a === void 0 ? void 0 : _a.removeAttribute(attribute);\n            },\n            focusInput: function (thumb) { var _a; (_a = _this.getInput(thumb)) === null || _a === void 0 ? void 0 : _a.focus(); },\n            isInputFocused: function (thumb) { return _this.getInput(thumb) === document.activeElement; },\n            shouldHideFocusStylesForPointerEvents: function () { return _this.hideFocus; },\n            getThumbKnobWidth: function (thumb) {\n                var _a, _b;\n                return (_b = (_a = _this.getThumbEl(thumb)) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(cssClasses.THUMB_KNOB)).getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0;\n            },\n            getThumbBoundingClientRect: function (thumb) { return _this.getThumbEl(thumb).getBoundingClientRect(); },\n            getBoundingClientRect: function () { return _this.root.getBoundingClientRect(); },\n            getValueIndicatorContainerWidth: function (thumb) {\n                return _this.getThumbEl(thumb)\n                    .querySelector(\".\".concat(cssClasses.VALUE_INDICATOR_CONTAINER))\n                    .getBoundingClientRect()\n                    .width;\n            },\n            isRTL: function () { return getComputedStyle(_this.root).direction === 'rtl'; },\n            setThumbStyleProperty: function (propertyName, value, thumb) {\n                var _a;\n                (_a = _this.getThumbEl(thumb)) === null || _a === void 0 ? void 0 : _a.style.setProperty(propertyName, value);\n            },\n            removeThumbStyleProperty: function (propertyName, thumb) {\n                var _a;\n                (_a = _this.getThumbEl(thumb)) === null || _a === void 0 ? void 0 : _a.style.removeProperty(propertyName);\n            },\n            setTrackActiveStyleProperty: function (propertyName, value) {\n                _this.trackActive.style.setProperty(propertyName, value);\n            },\n            removeTrackActiveStyleProperty: function (propertyName) {\n                _this.trackActive.style.removeProperty(propertyName);\n            },\n            setValueIndicatorText: function (value, thumb) {\n                var _a;\n                var valueIndicatorEl = (_a = _this.getThumbEl(thumb)) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(cssClasses.VALUE_INDICATOR_TEXT));\n                valueIndicatorEl.textContent = String(value);\n            },\n            getValueToAriaValueTextFn: function () { return _this.valueToAriaValueTextFn; },\n            updateTickMarks: function (tickMarks) {\n                _this.tickMarkStatuses = tickMarks;\n            },\n            setPointerCapture: function (pointerId) {\n                _this.root.setPointerCapture(pointerId);\n            },\n            emitChangeEvent: function (value, thumb) {\n                _this.emit(events.CHANGE, { value: value, thumb: thumb });\n            },\n            emitInputEvent: function (value, thumb) {\n                _this.emit(events.INPUT, { value: value, thumb: thumb });\n            },\n            emitDragStartEvent: function (_, thumb) {\n                // Emitting event is not yet implemented. See issue:\n                // https://github.com/material-components/material-components-web/issues/6448\n                var _a;\n                (_a = _this.getRipple(thumb)) === null || _a === void 0 ? void 0 : _a.activate();\n            },\n            emitDragEndEvent: function (_, thumb) {\n                // Emitting event is not yet implemented. See issue:\n                // https://github.com/material-components/material-components-web/issues/6448\n                var _a;\n                (_a = _this.getRipple(thumb)) === null || _a === void 0 ? void 0 : _a.deactivate();\n            },\n            registerEventHandler: function (evtType, handler) {\n                _this.listen(evtType, handler);\n                _this.addEventHandler(_this.root, evtType, handler);\n            },\n            deregisterEventHandler: function (evtType, handler) {\n                _this.unlisten(evtType, handler);\n                _this.removeEventHandler(_this.root, evtType, handler);\n            },\n            registerThumbEventHandler: function (thumb, evtType, handler) {\n                var thumbEl = _this.getThumbEl(thumb);\n                if (thumbEl) {\n                    thumbEl.addEventListener(evtType, handler);\n                    _this.addEventHandler(thumbEl, evtType, handler);\n                }\n            },\n            deregisterThumbEventHandler: function (thumb, evtType, handler) {\n                var thumbEl = _this.getThumbEl(thumb);\n                if (thumbEl) {\n                    thumbEl.removeEventListener(evtType, handler);\n                    _this.removeEventHandler(thumbEl, evtType, handler);\n                }\n            },\n            registerInputEventHandler: function (thumb, evtType, handler) {\n                var thumbInput = _this.getInput(thumb);\n                if (thumbInput) {\n                    thumbInput.addEventListener(evtType, handler);\n                    _this.addEventHandler(thumbInput, evtType, handler);\n                }\n            },\n            deregisterInputEventHandler: function (thumb, evtType, handler) {\n                var thumbInput = _this.getInput(thumb);\n                if (thumbInput) {\n                    thumbInput.removeEventListener(evtType, handler);\n                    _this.removeEventHandler(thumbInput, evtType, handler);\n                }\n            },\n            registerBodyEventHandler: function (evtType, handler) {\n                document.body.addEventListener(evtType, handler);\n                _this.addEventHandler(document.body, evtType, handler);\n            },\n            deregisterBodyEventHandler: function (evtType, handler) {\n                document.body.removeEventListener(evtType, handler);\n                _this.removeEventHandler(document.body, evtType, handler);\n            },\n            registerWindowEventHandler: function (evtType, handler) {\n                window.addEventListener(evtType, handler);\n                _this.addEventHandler(window, evtType, handler);\n            },\n            deregisterWindowEventHandler: function (evtType, handler) {\n                window.removeEventListener(evtType, handler);\n                _this.removeEventHandler(window, evtType, handler);\n            },\n            // tslint:enable:object-literal-sort-keys\n        };\n        return new MdcSliderFoundationAurelia(adapter);\n    };\n    MdcSlider.prototype.addEventHandler = function (element, evtType, handler) {\n        this.eventHandlers.push({ element: element, evtType: evtType, handler: handler });\n    };\n    MdcSlider.prototype.removeEventHandler = function (element, evtType, handler) {\n        var i = this.eventHandlers.findIndex(function (x) { return x.element === element && x.evtType === evtType && x.handler === handler; });\n        if (i !== -1) {\n            this.eventHandlers.splice(i, 1);\n        }\n    };\n    MdcSlider.prototype.cleanupEventHandlers = function () {\n        this.eventHandlers.forEach(function (x) {\n            x.element.removeEventListener(x.evtType, x.handler);\n        });\n        this.eventHandlers = [];\n    };\n    MdcSlider.prototype.getThumbEl = function (thumb) {\n        return thumb === Thumb.END ? this.endThumb : this.startThumb;\n    };\n    MdcSlider.prototype.getInput = function (thumb) {\n        return thumb === Thumb.END ? this.endInput : this.startInput;\n    };\n    MdcSlider.prototype.getRipple = function (thumb) {\n        return thumb === Thumb.END ? this.endRipple : this.startRipple;\n    };\n    MdcSlider.prototype.focus = function () {\n        this.root.focus();\n    };\n    MdcSlider.prototype.blur = function () {\n        this.root.blur();\n    };\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSlider.prototype, \"discrete\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSlider.prototype, \"tickMarks\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSlider.prototype, \"range\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSlider.prototype, \"disabled\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSlider.prototype, \"hideFocus\", void 0);\n    __decorate([\n        bindable.number,\n        __metadata(\"design:type\", Number)\n    ], MdcSlider.prototype, \"min\", void 0);\n    __decorate([\n        bindable.number,\n        __metadata(\"design:type\", Number)\n    ], MdcSlider.prototype, \"max\", void 0);\n    __decorate([\n        bindable.number,\n        __metadata(\"design:type\", Number)\n    ], MdcSlider.prototype, \"minRange\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSlider.prototype, \"step\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", Object)\n    ], MdcSlider.prototype, \"valueToAriaValueTextFn\", void 0);\n    MdcSlider = __decorate([\n        inject(Element),\n        useView(PLATFORM.moduleName('./mdc-slider.html')),\n        customElement('mdc-slider'),\n        __metadata(\"design:paramtypes\", [HTMLElement])\n    ], MdcSlider);\n    return MdcSlider;\n}(MdcComponent));\nexport { MdcSlider };\nfunction defineMdcSliderElementApis(element) {\n    Object.defineProperties(element, {\n        value: {\n            get: function () {\n                return this.au.controller.viewModel.value;\n            },\n            set: function (value) {\n                this.au.controller.viewModel.value = value;\n            },\n            configurable: true\n        },\n        valuestart: {\n            get: function () {\n                return this.au.controller.viewModel.valueStart;\n            },\n            set: function (value) {\n                this.au.controller.viewModel.valueStart = value;\n            },\n            configurable: true\n        },\n        focus: {\n            value: function () {\n                this.au.controller.viewModel.focus();\n            },\n            configurable: true\n        },\n        blur: {\n            value: function () {\n                this.au.controller.viewModel.blur();\n            },\n            configurable: true\n        }\n    });\n}\n//# sourceMappingURL=mdc-slider.js.map","import { PLATFORM } from 'aurelia-framework';\nexport { MdcSnackbar } from './mdc-snackbar';\nexport { MdcSnackbarService } from './mdc-snackbar-service';\nexport function configure(config) {\n    config.globalResources([\n        PLATFORM.moduleName('./mdc-snackbar')\n    ]);\n    config.aurelia.use\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/button'))\n        .plugin(PLATFORM.moduleName('@aurelia-mdc-web/icon-button'));\n}\n//# sourceMappingURL=index.js.map","import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\nimport { TemplatingEngine, inject } from 'aurelia-framework';\nimport { strings } from '@material/snackbar';\nvar MdcSnackbarService = /** @class */ (function () {\n    function MdcSnackbarService(templatingEngine) {\n        this.templatingEngine = templatingEngine;\n    }\n    MdcSnackbarService.prototype.open = function (label, actions, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var snackbar, closedResolver, closedPromise, bindingContext, childView, vm;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        snackbar = document.createElement('aside');\n                        snackbar.setAttribute('as-element', 'mdc-snackbar');\n                        snackbar.setAttribute(\"\".concat(strings.CLOSED_EVENT, \".trigger\"), 'handleClosed($event)');\n                        document.body.appendChild(snackbar);\n                        closedPromise = new Promise(function (r) { return closedResolver = r; });\n                        bindingContext = {\n                            handleClosed: function (evt) {\n                                closedResolver(evt.detail.reason);\n                                childView.detached();\n                                snackbar.remove();\n                            }\n                        };\n                        childView = this.templatingEngine.enhance({ element: snackbar, bindingContext: bindingContext });\n                        vm = snackbar.au.controller.viewModel;\n                        vm.label = label;\n                        if (actions !== undefined) {\n                            if (typeof actions === 'string') {\n                                vm.actions = [actions];\n                            }\n                            else {\n                                vm.actions = actions;\n                            }\n                        }\n                        if (options) {\n                            Object.assign(vm, options);\n                        }\n                        return [4 /*yield*/, vm.initialised];\n                    case 1:\n                        _a.sent();\n                        snackbar.au.controller.viewModel.open();\n                        return [2 /*return*/, closedPromise];\n                }\n            });\n        });\n    };\n    MdcSnackbarService = __decorate([\n        inject(TemplatingEngine),\n        __metadata(\"design:paramtypes\", [TemplatingEngine])\n    ], MdcSnackbarService);\n    return MdcSnackbarService;\n}());\nexport { MdcSnackbarService };\n//# sourceMappingURL=mdc-snackbar-service.js.map","import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\nimport { customElement, inject, useView, PLATFORM } from 'aurelia-framework';\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { MDCSnackbarFoundation, util, strings } from '@material/snackbar';\nimport { bindable } from 'aurelia-typed-observable-plugin';\nstrings.OPENING_EVENT = strings.OPENING_EVENT.toLowerCase();\nstrings.OPENED_EVENT = strings.OPENED_EVENT.toLowerCase();\nstrings.CLOSING_EVENT = strings.CLOSING_EVENT.toLowerCase();\nstrings.CLOSED_EVENT = strings.CLOSED_EVENT.toLowerCase();\nvar MdcSnackbar = /** @class */ (function (_super) {\n    __extends(MdcSnackbar, _super);\n    function MdcSnackbar() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.closeOnEscape = true;\n        return _this;\n    }\n    MdcSnackbar.prototype.timeoutChanged = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _b.sent();\n                        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setTimeoutMs(this.timeout);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSnackbar.prototype.closeOnEscapeChanged = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.initialised];\n                    case 1:\n                        _b.sent();\n                        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.setCloseOnEscape(this.closeOnEscape);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MdcSnackbar.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            announce: function () { return util.announce(_this.labelEl_); },\n            notifyClosed: function (reason) { return _this.emit(strings.CLOSED_EVENT, reason ? { reason: reason } : {}); },\n            notifyClosing: function (reason) { return _this.emit(strings.CLOSING_EVENT, reason ? { reason: reason } : {}); },\n            notifyOpened: function () { return _this.emit(strings.OPENED_EVENT, {}); },\n            notifyOpening: function () { return _this.emit(strings.OPENING_EVENT, {}); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n        };\n        return new MDCSnackbarFoundation(adapter);\n    };\n    MdcSnackbar.prototype.open = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.open();\n    };\n    /**\n     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the\n     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom\n     *     client-specific values may also be used if desired.\n     */\n    MdcSnackbar.prototype.close = function (reason) {\n        var _a;\n        if (reason === void 0) { reason = ''; }\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.close(reason);\n    };\n    MdcSnackbar.prototype.handleAction = function (action) {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.close(action);\n    };\n    MdcSnackbar.prototype.handleDismiss = function () {\n        this.close(strings.REASON_DISMISS);\n    };\n    MdcSnackbar.prototype.handleKeyDown = function (evt) {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleKeyDown(evt);\n        return true;\n    };\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSnackbar.prototype, \"label\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", Array)\n    ], MdcSnackbar.prototype, \"actions\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSnackbar.prototype, \"dismissible\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSnackbar.prototype, \"stacked\", void 0);\n    __decorate([\n        bindable.number,\n        __metadata(\"design:type\", Number)\n    ], MdcSnackbar.prototype, \"timeout\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSnackbar.prototype, \"closeOnEscape\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSnackbar.prototype, \"classes\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSnackbar.prototype, \"actionClasses\", void 0);\n    __decorate([\n        bindable,\n        __metadata(\"design:type\", String)\n    ], MdcSnackbar.prototype, \"dismissClasses\", void 0);\n    __decorate([\n        bindable.booleanAttr,\n        __metadata(\"design:type\", Boolean)\n    ], MdcSnackbar.prototype, \"leading\", void 0);\n    MdcSnackbar = __decorate([\n        inject(Element),\n        useView(PLATFORM.moduleName('./mdc-snackbar.html')),\n        customElement('mdc-snackbar')\n    ], MdcSnackbar);\n    return MdcSnackbar;\n}(MdcComponent));\nexport { MdcSnackbar };\n//# sourceMappingURL=mdc-snackbar.js.map","import { __decorate, __values } from \"tslib\";\nimport { viewEngineHooks } from 'aurelia-framework';\nvar EnhanceMdcSwitch = /** @class */ (function () {\n    function EnhanceMdcSwitch() {\n    }\n    EnhanceMdcSwitch.prototype.beforeCompile = function (template) {\n        var e_1, _a;\n        var actions = template.querySelectorAll('[mdc-switch]');\n        try {\n            for (var _b = __values(Array.from(actions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var i = _c.value;\n                i.setAttribute('as-element', 'mdc-switch');\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    EnhanceMdcSwitch = __decorate([\n        viewEngineHooks\n    ], EnhanceMdcSwitch);\n    return EnhanceMdcSwitch;\n}());\nexport { EnhanceMdcSwitch };\n//# sourceMappingURL=enhance-mdc-switch.js.map","import { PLATFORM, bindingMode, EventSubscriber, ValueAttributeObserver } from 'aurelia-framework';\nimport { MdcComponentAdapters } from '@aurelia-mdc-web/base';\nexport { MdcSwitch } from './mdc-switch';\nexport function configure(config) {\n    config.container.get(MdcComponentAdapters).registerMdcElementConfig(switchConfig);\n    config.globalResources([\n        PLATFORM.moduleName('./mdc-switch'),\n        PLATFORM.moduleName('./enhance-mdc-switch')\n    ]);\n    config.aurelia.use.plugin(PLATFORM.moduleName('@aurelia-mdc-web/ripple'));\n}\nvar switchConfig = {\n    tagName: 'mdc-switch',\n    properties: {\n        selected: {\n            defaultBindingMode: bindingMode.twoWay,\n            getObserver: function (element) {\n                return new ValueAttributeObserver(element, 'selected', new EventSubscriber(['change']));\n            }\n        }\n    }\n};\n//# sourceMappingURL=index.js.map","import { __decorate, __extends, __metadata } from \"tslib\";\nimport { MdcComponent } from '@aurelia-mdc-web/base';\nimport { MDCSwitchRenderFoundation } from '@material/switch';\nimport { inject, useView, PLATFORM, customElement } from 'aurelia-framework';\nvar switchId = 0;\nvar MdcSwitch = /** @class */ (function (_super) {\n    __extends(MdcSwitch, _super);\n    function MdcSwitch(root) {\n        var _this = _super.call(this, root) || this;\n        _this.root = root;\n        defineMdcSwitchElementApis(_this.root);\n        _this.root.id = \"mdc-switch-\".concat(++switchId);\n        return _this;\n    }\n    MdcSwitch.prototype.initialSyncWithDOM = function () {\n        var _a;\n        if (this.selected) {\n            this.root.classList.add('mdc-switch--selected');\n            this.root.setAttribute('aria-checked', 'true');\n        }\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.initFromDOM();\n    };\n    MdcSwitch.prototype.getDefaultFoundation = function () {\n        return new MDCSwitchRenderFoundation(this.createAdapter());\n    };\n    MdcSwitch.prototype.createAdapter = function () {\n        var _this = this;\n        return {\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            isDisabled: function () { return _this.root.disabled; },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            setAriaChecked: function (ariaChecked) {\n                return _this.root.setAttribute('aria-checked', ariaChecked);\n            },\n            setDisabled: function (disabled) {\n                _this.root.disabled = disabled;\n            },\n            state: this,\n        };\n    };\n    MdcSwitch.prototype.handleClick = function () {\n        var _a;\n        (_a = this.foundation) === null || _a === void 0 ? void 0 : _a.handleClick();\n        this.emit('change', {}, true);\n    };\n    MdcSwitch = __decorate([\n        inject(Element),\n        useView(PLATFORM.moduleName('./mdc-switch.html')),\n        customElement('mdc-switch'),\n        __metadata(\"design:paramtypes\", [Object])\n    ], MdcSwitch);\n    return MdcSwitch;\n}(MdcComponent));\nexport { MdcSwitch };\nfunction defineMdcSwitchElementApis(element) {\n    Object.defineProperties(element, {\n        selected: {\n            get: function () {\n                return this.au.controller.viewModel.selected;\n            },\n            set: function (value) {\n                this.au.controller.viewModel.selected = value;\n            },\n            configurable: true\n        }\n    });\n}\n//# sourceMappingURL=mdc-switch.js.map","// Module\nvar code = \"<template class=\\\"\\n    mdc-segmented-button__segment\\n    ${touch ? 'mdc-segmented-button--touch' : ''}\\n  \\\" mdc-ripple=\\\"no-class.bind: true\\\" click.trigger=\\\"handleClick()\\\">\\n  <div class=\\\"mdc-segmented-button__touch\\\" if.bind=\\\"touch\\\"></div>\\n  <div class=\\\"mdc-segmented-button__ripple\\\"></div>\\n  <i class=\\\"material-icons mdc-segmented-button__icon\\\" if.bind=\\\"icon\\\">${icon}</i>\\n  <div class=\\\"mdc-segmented-button__label\\\">\\n    <slot></slot>\\n  </div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template class=\\\"mdc-segmented-button ${single ? 'mdc-segmented-button--single-select' : ''}\\\"\\n  selected.trigger=\\\"handleSelected($event)\\\">\\n  <slot></slot>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<!-- DO NOT FORMAT THIS FILE! ANY SPACE BEFORE <SLOT> OR <SPAN> BREAKS HELPER TEXT ALIGNMENT! -->\\n<template class=\\\"\\n    ${ROOT} ${persistent ? helperTextCssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT : ''}\\n    ${validation ? helperTextCssClasses.HELPER_TEXT_VALIDATION_MSG : ''}\\\"><slot></slot><span class=\\\"mdc-select-helper-text__error\\\" repeat.for=\\\"e of errors\\\">${e}<br/></span>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template class=\\\"\\n    mdc-select\\n    mdc-select--${outlined ? 'outlined' : 'filled'}\\n    ${leadingIcon ? 'mdc-select--with-leading-icon' : ''}\\n    ${required ? 'mdc-select--required' : ''}\\n  \\\" role=\\\"button\\\" aria-haspopup=\\\"listbox\\\" id=\\\"${id}\\\">\\n  <div class=\\\"mdc-select__anchor\\\" ref=\\\"selectAnchor\\\" mdc-ripple=\\\"no-class.bind: true;\\\" change.trigger=\\\"handleChange()\\\"\\n    focus.trigger=\\\"handleFocus()\\\" blur.trigger=\\\"handleBlur()\\\" keydown.trigger=\\\"handleKeydown($event)\\\"\\n    click.trigger=\\\"handleClick($event)\\\">\\n    <span class=\\\"mdc-select__ripple\\\" if.bind=\\\"!outlined\\\"></span>\\n    <slot name=\\\"leading-icon\\\"></slot>\\n    <span class=\\\"mdc-select__selected-text-container\\\">\\n      <span class=\\\"mdc-select__selected-text\\\" ref=\\\"selectedText\\\"></span>\\n    </span>\\n    <span class=\\\"mdc-select__dropdown-icon\\\">\\n      <svg class=\\\"mdc-select__dropdown-icon-graphic\\\" viewBox=\\\"7 10 10 5\\\">\\n        <polygon class=\\\"mdc-select__dropdown-icon-inactive\\\" stroke=\\\"none\\\" fill-rule=\\\"evenodd\\\" points=\\\"7 10 12 15 17 10\\\">\\n        </polygon>\\n        <polygon class=\\\"mdc-select__dropdown-icon-active\\\" stroke=\\\"none\\\" fill-rule=\\\"evenodd\\\" points=\\\"7 15 12 10 17 15\\\">\\n        </polygon>\\n      </svg>\\n    </span>\\n    <mdc-floating-label if.bind=\\\"label && !outlined\\\" for=\\\"${id}\\\" view-model.ref=\\\"mdcLabel\\\">${label}\\n    </mdc-floating-label>\\n    <mdc-line-ripple if.bind=\\\"!outlined\\\" view-model.ref=\\\"lineRipple\\\"></mdc-line-ripple>\\n    <mdc-notched-outline if.bind=\\\"outlined\\\" view-model.ref=\\\"outline\\\">\\n      <mdc-floating-label if.bind=\\\"label\\\" for=\\\"${id}\\\" view-model.ref=\\\"mdcLabel\\\">${label}</mdc-floating-label>\\n    </mdc-notched-outline>\\n  </div>\\n\\n  <mdc-menu class=\\\"mdc-select__menu ${naturalWidth || hoistToBody || fixed ? '' : 'mdc-menu-surface--fullwidth'}\\\"\\n    view-model.ref=\\\"menu\\\" ref=\\\"menuElement\\\" typeahead mdcmenusurface:closed.trigger=\\\"handleMenuClosed()\\\"\\n    anchor-margin.bind=\\\"anchorMargin\\\" mdcmenusurface:opened.trigger=\\\"handleMenuOpened()\\\"\\n    mdcmenu:selected.trigger=\\\"handleMenuItemAction($event)\\\" mdclist:itemschanged.trigger=\\\"handleItemsChanged($event)\\\"\\n    hoist-to-body.bind=\\\"hoistToBody\\\" fixed.bind=\\\"fixed\\\">\\n    <slot></slot>\\n  </mdc-menu>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template class=\\\"mdc-slider\\n  ${range ? 'mdc-slider--range' : ''}\\n  ${discrete ? 'mdc-slider--discrete' : ''}\\n  ${discrete && tickMarks ? 'mdc-slider--tick-marks' : ''}\\n  \\\">\\n  <input class=\\\"mdc-slider__input\\\" type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" value=\\\"0\\\" if.bind=\\\"range\\\" ref=\\\"startInput\\\">\\n  <input class=\\\"mdc-slider__input\\\" type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" value=\\\"0\\\" ref=\\\"endInput\\\">\\n  <div class=\\\"mdc-slider__track\\\">\\n    <div class=\\\"mdc-slider__track--inactive\\\"></div>\\n    <div class=\\\"mdc-slider__track--active\\\">\\n      <div class=\\\"mdc-slider__track--active_fill\\\" ref=\\\"trackActive\\\"></div>\\n    </div>\\n    <div class=\\\"mdc-slider__tick-marks\\\" if.bind=\\\"discrete && tickMarks\\\">\\n      <div repeat.for=\\\"s of tickMarkStatuses\\\"\\n        class=\\\"mdc-slider__tick-mark--${s === TickMark.ACTIVE ? 'active' : 'inactive' }\\\"></div>\\n    </div>\\n  </div>\\n  <div class=\\\"mdc-slider__thumb\\\" mdc-ripple=\\\"unbounded.bind: true\\\" mdc-ripple.ref=\\\"startRipple\\\" if.bind=\\\"range\\\"\\n    ref=\\\"startThumb\\\">\\n    <div class=\\\"mdc-slider__value-indicator-container\\\" if.bind=\\\"discrete\\\">\\n      <div class=\\\"mdc-slider__value-indicator\\\">\\n        <span class=\\\"mdc-slider__value-indicator-text\\\"></span>\\n      </div>\\n    </div>\\n    <div class=\\\"mdc-slider__thumb-knob\\\"></div>\\n  </div>\\n  <div class=\\\"mdc-slider__thumb\\\" mdc-ripple=\\\"unbounded.bind: true\\\" mdc-ripple.ref=\\\"endRipple\\\" ref=\\\"endThumb\\\"\\n    style=\\\"overflow: visible;\\\">\\n    <div class=\\\"mdc-slider__value-indicator-container\\\" if.bind=\\\"discrete\\\">\\n      <div class=\\\"mdc-slider__value-indicator\\\">\\n        <span class=\\\"mdc-slider__value-indicator-text\\\"></span>\\n      </div>\\n    </div>\\n    <div class=\\\"mdc-slider__thumb-knob\\\"></div>\\n  </div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template class=\\\"mdc-snackbar ${classes}\\n  ${stacked ? 'mdc-snackbar--stacked' : ''}\\n  ${leading ? 'mdc-snackbar--leading' : ''}\\n\\\" keydown.trigger=\\\"handleKeyDown($event)\\\">\\n  <div class=\\\"mdc-snackbar__surface\\\" ref=\\\"surfaceEl_\\\">\\n    <div class=\\\"mdc-snackbar__label\\\" role=\\\"status\\\" aria-live=\\\"polite\\\" ref=\\\"labelEl_\\\">${label}</div>\\n    <div class=\\\"mdc-snackbar__actions\\\">\\n      <button repeat.for=\\\"a of actions\\\" class=\\\"mdc-button mdc-snackbar__action ${actionClasses}\\\"\\n        click.trigger=\\\"handleAction(a)\\\">${a}</button>\\n      <button if.bind=\\\"dismissible\\\" class=\\\"mdc-icon-button mdc-snackbar__dismiss material-icons ${dismissClasses}\\\"\\n        click.trigger=\\\"handleDismiss()\\\">close</button>\\n    </div>\\n  </div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template class=\\\"mdc-switch ${selected ? 'mdc-switch--selected' : ''} ${disabled ? 'mdc-switch--disabled' : ''}\\\"\\n  type=\\\"button\\\" role=\\\"switch\\\" aria-checked=\\\"${selected ? 'true' : 'false'}\\\"\\n  mdc-ripple=\\\"no-class.bind: true; unbounded.bind: true; surface.bind: rippleElement\\\" click.delegate=\\\"handleClick()\\\">\\n  <div class=\\\"mdc-switch__track\\\"></div>\\n  <div class=\\\"mdc-switch__handle-track\\\">\\n    <div class=\\\"mdc-switch__handle\\\">\\n      <div class=\\\"mdc-switch__shadow\\\">\\n        <div class=\\\"mdc-elevation-overlay\\\"></div>\\n      </div>\\n      <div class=\\\"mdc-switch__ripple\\\" ref=\\\"rippleElement\\\"></div>\\n      <div class=\\\"mdc-switch__icons\\\">\\n        <svg class=\\\"mdc-switch__icon mdc-switch__icon--on\\\" viewBox=\\\"0 0 24 24\\\">\\n          <path d=\\\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\\\" />\\n        </svg>\\n        <svg class=\\\"mdc-switch__icon mdc-switch__icon--off\\\" viewBox=\\\"0 0 24 24\\\">\\n          <path d=\\\"M20 13H4v-2h16v2z\\\" />\\n        </svg>\\n      </div>\\n    </div>\\n  </div>\\n</template>\\n\";\n// Exports\nexport default code;"],"names":[],"sourceRoot":""}