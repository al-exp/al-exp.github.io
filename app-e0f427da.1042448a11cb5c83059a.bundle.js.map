{"version":3,"file":"app-e0f427da.1042448a11cb5c83059a.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;ACEA;;;;;;;;;;;;;;;ACEA;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AIbA;AAIA;AAAA;AAKA;AAAA;AAGA;AACA;;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAGA;AAAA;AAEA;AAAA;AAsBA;AAlBA;AAEA;AAEA;AAAA;AAEA;;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;;;AAAA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAKA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AAAA;AACA;AACA;AACA;AAEA;;;AACA;AAGA;AAEA;AACA;AAGA;AACA;;;AACA;AAEA;;;AACA;;;AACA;AAEA;;;AACA;;;AACA;AAEA;;;;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;;;AACA;AAEA;;;;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;;;AACA;AAEA;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA;AAEA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAHA;;AAMA;AACA;AACA;AACA;;AAHA;;;;;;AAKA;AAEA;;;;AACA;AACA;AACA;AACA;;AAHA;;;;;AAIA;AA9GA;AADA;;AACA;AAiHA;AAAA;AAjHA;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAGA;AAAA;AAAA;;AAuDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AAGA;AAAA;AAEA;AAAA;AAmBA;AAfA;AAEA;AACA;;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAMA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://web-client/./src/model/contracts/baseline-info.ts","webpack://web-client/./src/model/contracts/baseline.ts","webpack://web-client/./src/model/contracts/data-service.ts","webpack://web-client/./src/model/contracts/index.ts","webpack://web-client/./src/model/contracts/test-result-value.ts","webpack://web-client/./src/model/contracts/test-results.ts","webpack://web-client/./src/model/contracts/test.ts","webpack://web-client/./src/model/implementation/baseline-info.ts","webpack://web-client/./src/model/implementation/baseline.ts","webpack://web-client/./src/model/implementation/data-service.ts","webpack://web-client/./src/model/implementation/index.ts","webpack://web-client/./src/model/implementation/test-results.ts","webpack://web-client/./src/model/implementation/test.ts","webpack://web-client/./src/model/index.ts"],"sourcesContent":["import { IModel } from \"@logofx/aurelia-mvvm-plugin\";\n\nexport type BaselineStatus = 'pending' | 'created' | 'failed';\n\nexport interface IBaselineInfo extends Readonly<IModel<string>> {\n  name: string;\n}\n","import { IEditableModel } from \"@logofx/aurelia-mvvm-plugin\";\n\nexport const IBaseline = Symbol('IBaseline');\n\nexport interface IBaseline extends IEditableModel<string> {\n  name: string;\n  originalFileNames: string[];\n  singleCellCapacity: number;\n  topologyOfCellPackPValue: number;\n  topologyOfCellPackSValue: number;\n  uploadedAt: string;\n}\n","import { IBaseline } from \"./baseline\";\nimport { IBaselineInfo } from \"./baseline-info\";\nimport { ITest } from \"./test\";\n\nexport const IDataService = Symbol('IDataService');\n\nexport interface IDataService {\n  createTestAsync(): Promise<ITest>;\n  getTestsAsync(): Promise<ITest[]>;\n  getTestAsync(id: string): Promise<ITest>;\n\n  getBaselineInfosAsync(): Promise<IBaselineInfo[]>;\n  \n  createBaselineAsync(): Promise<IBaseline>;\n  getBaselinesAsync(): Promise<IBaseline[]>;\n  updateBaselineAsync(model: IBaseline): Promise<void>;\n  deleteBaselineAsync(baseline: IBaseline);\n}\n","import { FrameworkConfiguration } from 'aurelia-framework';\nimport { Baseline } from 'model/implementation';\nimport { IBaseline } from 'model/contracts';\n\nexport * from './data-service';\nexport * from './test';\nexport * from './test-results';\nexport * from './test-result-value';\nexport * from './baseline-info';\nexport * from './baseline';\n\nexport function configure(config: FrameworkConfiguration): void {\n  config.aurelia.container.registerTransient(IBaseline, Baseline);      \n}\n","export interface ITestResultValue {\n  value: number;\n  time: number;\n}\n","import { ITestResultValue } from \"./test-result-value\";\n\nexport interface ITestResults {\n  stateOfRisk: number;\n  h: ITestResultValue[];\n  m: ITestResultValue[];\n  a: ITestResultValue[];\n  x: ITestResultValue[];\n  y: ITestResultValue[];\n}\n","import { IEditableModel } from \"@logofx/aurelia-mvvm-plugin\";\nimport { IBaselineInfo } from \"./baseline-info\";\nimport { ITestResults } from \"./test-results\";\n\nexport interface ITest extends IEditableModel<string> {\n  id: string;\n  name: string;\n  originalFileName: string;\n  stateOfCharge: number;\n  temperature: number;\n  baseline: IBaselineInfo;\n  uploadedAt: string;\n  testedAt: string;\n}\n","import { Model } from \"@logofx/aurelia-mvvm-plugin\";\nimport { Rule, ValidationRules } from \"aurelia-validation\";\nimport { BaselineStatus, IBaselineInfo } from \"model/contracts\";\n\nexport class BaselineInfo extends Model<string> implements Readonly<IBaselineInfo> {\n\n  id: string;\n  name: string;\n  \n  constructor(id: string, name: string) {\n    super();\n\n    this.id = id;\n    this.name = name;\n  }\n}\n","import { EditableModel } from \"@logofx/aurelia-mvvm-plugin\";\nimport { Rule, ValidationRules } from \"aurelia-validation\";\nimport { IBaseline } from \"model/contracts/baseline\";\n\nexport class Baseline extends EditableModel<string> implements IBaseline{\n  \n  constructor(){\n    super();\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.rules = <Rule<any, any>[][]>ValidationRules\n    .ensure((baseline: Baseline) => baseline.name).displayName('The Baseline Name').required().withMessage('The value is mandatory')\n    .satisfies(\n      obj => \n      obj.length > 0\n      ).withMessage('The value is mandatory')\n    .rules;\n  }\n  \n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n  public set name(value: string) {\n    this._name = value;\n    this.makeDirty();\n  }\n\n  private _originalFileNames: string[] = [];\n  public get originalFileNames(): string[] {\n    return this._originalFileNames;\n  }\n  // public set originalFileNames(value: string[]) {\n  //   this._originalFileNames = value;\n  //   this.makeDirty();\n  // }\n\n  private _singleCellCapacity: number;\n  public get singleCellCapacity(): number {\n    return this._singleCellCapacity;\n  }\n  public set singleCellCapacity(value: number) {\n    this._singleCellCapacity = value;\n    this.makeDirty();\n  }\n\n  private _topologyOfCellPackPValue: number;\n  public get topologyOfCellPackPValue(): number {\n    return this._topologyOfCellPackPValue;\n  }\n  public set topologyOfCellPackPValue(value: number) {\n    this._topologyOfCellPackPValue = value;\n    this.makeDirty();\n  }\n\n  private _topologyOfCellPackSValue: number;\n  public get topologyOfCellPackSValue(): number {\n    return this._topologyOfCellPackSValue;\n  }\n  public set topologyOfCellPackSValue(value: number) {\n    this._topologyOfCellPackSValue = value;\n    this.makeDirty();\n  }\n\n  private _uploadedAt: string;\n  public get uploadedAt(): string {\n    return this._uploadedAt;\n  }\n  public set uploadedAt(value: string) {\n    this.makeDirty();\n    this._uploadedAt = value;\n  }\n}\n","import { Guid } from '@logofx/aurelia-mvvm-plugin';\nimport { inject, singleton } from 'aurelia-dependency-injection';\nimport { BaselineDto, IDataProvider } from 'data';\nimport { IBaseline, IBaselineInfo, IDataService } from 'model/contracts';\nimport { ITest } from 'model/contracts/test';\nimport { Baseline } from './baseline';\nimport { BaselineInfo } from './baseline-info';\nimport { Test } from './test';\n\n@inject(IDataProvider)\nexport class DataService implements IDataService {\n  \n\n  constructor(private dataProvider: IDataProvider) {\n    const x = this.dataProvider;\n    const y = x;\n  }\n  \n  public async getBaselineInfosAsync(): Promise<IBaselineInfo[]> {\n    return new Promise<IBaselineInfo[]>(resolve => {\n      //const baselines = new Array<IBaselineInfo>();\n\n      const baselines: IBaselineInfo[] \n        = Array.from({ \n            length: 10 \n          }\n          , (x, i) => new BaselineInfo(i.toString(), `Baseline ${i}`));\n      \n      resolve(baselines);\n    });\n  }\n \n  public async getTestsAsync(): Promise<ITest[]> {\n    throw new Error('Method not implemented.');\n  }\n  \n  public async getTestAsync(id: string): Promise<ITest> {\n    throw new Error('Method not implemented.');\n  }\n  \n  public async createTestAsync(): Promise<ITest> {\n    class NewTest extends Test {\n      constructor () {\n        super();\n\n        this.name = 'New Test';\n        this.id = Guid.create().toString();\n        this.makeNew();\n      }\n    }\n\n    return new Promise<ITest>(resolve => {\n      const test = new NewTest();\n      resolve(test);\n    });\n  }\n\n  public async createBaselineAsync(): Promise<IBaseline> {\n    class NewBaseline extends Baseline {\n      constructor () {\n        super();\n\n        this.id = Guid.create().toString();\n        this.name = 'New Baseline';\n        this.singleCellCapacity = 1;\n        this.topologyOfCellPackPValue = 1;\n        this.topologyOfCellPackSValue = 1;\n        this.makeNew();\n      }\n    }\n\n    return new Promise<IBaseline>(resolve => {\n      const baseline = new NewBaseline();\n      resolve(baseline);\n    });\n  }\n\n  public async getBaselinesAsync(): Promise<IBaseline[]> {\n\n    return (await this.dataProvider.getBaselinesAsync()).map((baselineDto: BaselineDto) => {\n        const baseline = new Baseline();\n        baseline.id = baselineDto.id;\n        baseline.name = baselineDto.name;\n        baselineDto.originalFileNames.forEach(x => baseline.originalFileNames.push(x));\n        baseline.singleCellCapacity = baselineDto.singleCellCapacity;\n        baseline.topologyOfCellPackPValue =  baselineDto.topologyOfCellPack.pValue;\n        baseline.topologyOfCellPackSValue =  baselineDto.topologyOfCellPack.sValue;\n        baseline.uploadedAt = baselineDto.uploadedAt;\n\n        return baseline;\n      });    \n    }\n\n    public async updateBaselineAsync(model: IBaseline): Promise<void> {\n      const dto = new BaselineDto();\n      dto.id = model.id;\n      dto.name = model.name;\n      dto.originalFileNames = model.originalFileNames;\n      dto.singleCellCapacity = model.singleCellCapacity;\n      dto.topologyOfCellPack = { pValue: model.topologyOfCellPackPValue, sValue: model.topologyOfCellPackSValue };\n      dto.uploadedAt = model.uploadedAt;\n      if (model.isNew) {\n        await this.dataProvider.postBaselineAsync(dto)\n              .catch(error => {\n                throw error;\n              });\n      }\n      else {\n        await this.dataProvider.putBaselineAsync(dto)\n              .catch(error => {\n                throw error;\n              });\n      }\n    }\n\n    public async deleteBaselineAsync(baseline: IBaseline): Promise<void> {\n      await this.dataProvider.deleteBaselineAsync(baseline.id)\n        .catch(error => {\n          throw error;\n        });\n    }\n    \n    \n}\n","import { FrameworkConfiguration } from 'aurelia-framework';\nimport { IDataService, DataService } from 'model';\n\nexport * from './data-service';\nexport * from './test-results';\nexport * from './test';\nexport * from './baseline-info';\nexport * from './baseline';\n\nexport function configure(config: FrameworkConfiguration): void {\n  config.aurelia.container.registerSingleton(IDataService, DataService); \n}\n","import { Model } from \"@logofx/aurelia-mvvm-plugin\";\nimport { ITestResults, ITestResultValue } from \"model/contracts\";\n\nexport class TestResults extends Model<string> implements Readonly<ITestResults> {\n  stateOfRisk: number;\n  h: ITestResultValue[];\n  m: ITestResultValue[];\n  a: ITestResultValue[];\n  x: ITestResultValue[];\n  y: ITestResultValue[];\n  // private _h: ITestResultValue[];\n  // public get h(): ITestResultValue[] {\n  //   return this._h;\n  // }\n  // public set h(value: ITestResultValue[]) {\n  //   this._h = value;\n  // }\n\n  // private _m: ITestResultValue[];\n  // public get m(): ITestResultValue[] {\n  //   return this._m;\n  // }\n  // public set m(value: ITestResultValue[]) {\n  //   this._m = value;\n  // }\n  \n  // private _a: ITestResultValue[];\n  // public get a(): ITestResultValue[] {\n  //   return this._a;\n  // }\n  // public set a(value: ITestResultValue[]) {\n  //   this._a = value;\n  // }\n  \n  // private _x: ITestResultValue[];\n  // public get x(): ITestResultValue[] {\n  //   return this._x;\n  // }\n  // public set x(value: ITestResultValue[]) {\n  //   this._x = value;\n  // }\n  \n  // private _y: ITestResultValue[];\n  // public get y(): ITestResultValue[] {\n  //   return this._y;\n  // }\n  // public set y(value: ITestResultValue[]) {\n  //   this._y = value;\n  // }\n  // private _stateOfRisk: number;\n  \n  // public get stateOfRisk(): number {\n  //   return this._stateOfRisk;\n  // }\n  \n  // public set stateOfRisk(value: number) {\n  //   this._stateOfRisk = value;\n  // }\n}\n","import { EditableModel } from \"@logofx/aurelia-mvvm-plugin\";\nimport { Rule, ValidationRules } from 'aurelia-validation';\nimport { IBaselineInfo, ITest, ITestResults } from \"model/contracts\";\n\nexport class Test extends EditableModel<string> implements ITest {\n  \n  constructor(){\n    super();\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.rules = <Rule<any, any>[][]>ValidationRules\n    .ensure((test: Test) => test.name).displayName('The Test Name').required().withMessage('The value is mandatory')\n    .ensure((test: Test) => test.baseline).displayName('The Baseline').required().withMessage('The value is mandatory')\n    .rules;\n  }\n  \n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n  public set name(value: string) {\n    this._name = value;\n    this.makeDirty();\n  }\n\n  private _originalFileName: string = String.empty;\n  public get originalFileName(): string {\n    return this._originalFileName;\n  }\n  public set originalFileName(value: string) {\n    this._originalFileName = value;\n    this.makeDirty();\n  }\n\n  private _stateOfCharge: number;\n  public get stateOfCharge(): number {\n    return this._stateOfCharge;\n  }\n  public set stateOfCharge(value: number) {\n    this._stateOfCharge = value;\n    this.makeDirty();\n  }\n\n  private _temperature: number;\n  public get temperature(): number {\n    return this._temperature;\n  }\n  public set temperature(value: number) {\n    this._temperature = value;\n    this.makeDirty();\n  }\n\n  private _baseline: IBaselineInfo;\n  public get baseline(): IBaselineInfo {\n    return this._baseline;\n  }\n  public set baseline(value: IBaselineInfo) {\n    this._baseline = value;\n    this.makeDirty();\n  }\n  \n  private _uploadedAt: string;\n  public get uploadedAt(): string {\n    return this._uploadedAt;\n  }\n  public set uploadedAt(value: string) {\n    this._uploadedAt = value;\n    this.makeDirty();\n  }\n\n  private _testedAt: string;\n  public get testedAt(): string {\n    return this._testedAt;\n  }\n  public set testedAt(value: string) {\n    this._testedAt = value;\n    this.makeDirty();\n  }\n\n}\n","import { FrameworkConfiguration, PLATFORM } from 'aurelia-framework';\nexport * from './contracts';\nexport * from './implementation';\n\nexport function configure(config: FrameworkConfiguration): void {\n  config.aurelia.use\n    .feature(PLATFORM.moduleName('model/contracts/index'))\n    .feature(PLATFORM.moduleName('model/implementation/index'));\n}\n"],"names":[],"sourceRoot":""}